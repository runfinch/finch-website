{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Finch","text":"<p>Finch is an open source tool for local container development. Finch aims to help promote innovative upstream container projects (including Lima, nerdctl, containerd and BuildKit) by making it easy to install and use them. Finch provides a simple native client to tie it all together.</p> <p>Today, Finch is available for developers on macOS (Intel and Apple Silicon), Windows and Linux.</p>"},{"location":"#get-involved","title":"Get Involved","text":"<p>Finch is an open source project, originally released by Amazon Web Services in November 2022.</p> <p>The project is still in its early days, and we have lots of great ideas on where we want to take Finch. We would love your feedback!</p> <p>Get involved on GitHub, raise feature requests, report bugs, contribute where you can. Everyone is welcome!</p>"},{"location":"architecture/","title":"Index","text":"macOSWindows"},{"location":"architecture/#macos-architecture","title":"macOS Architecture","text":"<p>In this section we will dive into the various open source components that Finch distributes and how they piece together to form a local development environment on macOS.</p>"},{"location":"architecture/#finch-architecture","title":"Finch Architecture","text":"Component Description License Lima Lima (Linux virtual machines) launches Linux virtual machines with automatic file sharing and port forwarding. In Finch, Lima configures the hypervisor, it passes in the virtual machine image and any pre and post startup scripts. Apache 2.0 nerdctl nerdctl (contaiNERD ctl) is a command line client for containerd with a similar user experience to the Docker CLI. In Finch, Nerdctl runs inside the virtual machine, starting and stopping containers by communicating directly to containerd. Apache 2.0 BuildKit Moby's BuildKit is a toolkit for converting source code to build artifacts in an efficient, expressive and repeatable manner. In Finch, BuildKit is used to build Docker and OCI container images inside the virtual machine. Apache 2.0 containerd containerd is an industry-standard container runtime with an emphasis on simplicity, robustness, and portability. In Finch, containerd is the underlying container runtime that manages the containers in the virtual machine Apache 2.0 QEMU QEMU is a generic and open source machine emulator and virtualizer. In Finch, QEMU manages the underlying virtual machine on macOS using the Hypervisor.Framework. GPL v2"},{"location":"architecture/#windows-architecture","title":"Windows Architecture","text":"<p>In this section we will dive into the various open source components that Finch distributes and how they piece together to form a local development environment on Windows.</p>"},{"location":"architecture/#finch-architecture_1","title":"Finch Architecture","text":"Component Description License Lima Lima (Linux virtual machines) launches Linux virtual machines with automatic file sharing and port forwarding. In Finch, Lima configures the hypervisor, it passes in the virtual machine image and any pre and post startup scripts. Apache 2.0 nerdctl nerdctl (contaiNERD ctl) is a command line client for containerd with a similar user experience to the Docker CLI. In Finch, Nerdctl runs inside the virtual machine, starting and stopping containers by communicating directly to containerd. Apache 2.0 BuildKit Moby's BuildKit is a toolkit for converting source code to build artifacts in an efficient, expressive and repeatable manner. In Finch, BuildKit is used to build Docker and OCI container images inside the virtual machine. Apache 2.0 containerd containerd is an industry-standard container runtime with an emphasis on simplicity, robustness, and portability. In Finch, containerd is the underlying container runtime that manages the containers in the virtual machine Apache 2.0 WSL 2 WSL 2 Windows Subsystem for Linux (WSL) is a feature of Windows that allows you to run a Linux environment on your Windows machine, without the need for a separate virtual machine or dual booting. WSL is designed to provide a seamless and productive experience for developers who want to use both Windows and Linux at the same time. In Finch, WSL is used to manage the underlying virtual machine. Proprietary"},{"location":"contributing/","title":"Contributing Guide","text":"<p>Thank you for your interest in contributing to Finch. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community.</p> <p>Depending on your area of interest there are 2 different contributing guides:</p> <ul> <li> <p>If you are interested in contributing to the Finch project, see   the Finch Contributing   Guide.</p> </li> <li> <p>If you are interested in contributing to this Finch website,  see   the Finch Website Contributing   Guide.</p> </li> </ul>"},{"location":"docs/","title":"Docs","text":"<p>In this section you can find the complete reference documentation for all of the different features and settings for Finch.</p> <p>\ud83d\udc48 Please use the side-navigation on the left in order to browse the different topics.</p>"},{"location":"docs/changelog/","title":"Changelog","text":""},{"location":"docs/changelog/#1103-2025-07-31","title":"1.10.3 (2025-07-31)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies","title":"Build System or External Dependencies","text":"<ul> <li>deps: bump golang.org/x/tools from 0.34.0 to 0.35.0 (#1485) (eb6d8e1)</li> <li>deps: Bump submodules and dependencies (#1487) (7d9a6bf)</li> </ul>"},{"location":"docs/changelog/#1102-2025-07-31","title":"1.10.2 (2025-07-31)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_1","title":"Build System or External Dependencies","text":"<ul> <li>deps: bump github.com/docker/cli (9239620)</li> <li>deps: bump github.com/docker/cli from 28.3.0+incompatible to 28.3.3+incompatible (#1478) (9239620)</li> <li>deps: bump github.com/docker/docker (ff3b4a8)</li> <li>deps: bump github.com/docker/docker from 28.3.0+incompatible to 28.3.3+incompatible (#1477) (ff3b4a8)</li> <li>deps: Bump submodules and dependencies (#1482) (664e527)</li> </ul>"},{"location":"docs/changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>ci: Add error handling for notarization step in release-installer script (#1476) (acf9d02)</li> <li>ci: Added error handling for notarization step (acf9d02)</li> <li>e2e ubuntu workflow should use non-release fleet (#1468) (82b1280)</li> <li>vm: Don't fail if settings match existing one (#1466) (3f680c6)</li> </ul>"},{"location":"docs/changelog/#1101-2025-07-25","title":"1.10.1 (2025-07-25)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_2","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump submodules and dependencies (#1467) (8be886c)</li> <li>deps: Bump submodules and dependencies (#1469) (bc3590b)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>workflow trigger and typo in upload-verified-artifacts-to-s3.yaml (#1462) (c48a1ea)</li> </ul>"},{"location":"docs/changelog/#1100-2025-07-15","title":"1.10.0 (2025-07-15)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_3","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump submodules and dependencies (#1460) (f7af7c1)</li> </ul>"},{"location":"docs/changelog/#features","title":"Features","text":"<ul> <li>add experimental_features config option (#1323) (e55c91d)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>remove extra quotation in deb workflow (#1443) (ff980fa)</li> <li>ubuntu nightly workflow inputs (#1447) (330c198)</li> <li>ubuntu workflow fixes (#1441) (fc83232)</li> <li>vm settings w/o flag show settings help (#1456) (dc20464)</li> </ul>"},{"location":"docs/changelog/#190-2025-06-30","title":"1.9.0 (2025-06-30)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_4","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.36.3 to 1.36.5 (#1434) (d6aa084)</li> <li>deps: Bump github.com/docker/cli (8c1611c)</li> <li>deps: Bump github.com/docker/cli from 28.2.2+incompatible to 28.3.0+incompatible (#1439) (8c1611c)</li> <li>deps: Bump github.com/docker/docker (ea432b4)</li> <li>deps: Bump github.com/docker/docker from 28.2.2+incompatible to 28.3.0+incompatible (#1438) (ea432b4)</li> <li>deps: Bump k8s.io/apimachinery from 0.32.4 to 0.33.1 (#1410) (11f8c4d)</li> </ul>"},{"location":"docs/changelog/#features_1","title":"Features","text":"<ul> <li>migrate from golang gomock to uber gomock (#1431) (3d98454)</li> <li>Ubuntu packaging (#1425) (3d6590e)</li> </ul>"},{"location":"docs/changelog/#183-2025-06-10","title":"1.8.3 (2025-06-10)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_5","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/docker/cli (8951770)</li> <li>deps: Bump github.com/docker/cli from 28.1.1+incompatible to 28.2.2+incompatible (#1421) (8951770)</li> <li>deps: Bump github.com/docker/docker (bdae3ac)</li> <li>deps: Bump github.com/docker/docker from 28.1.1+incompatible to 28.2.2+incompatible (#1420) (bdae3ac)</li> <li>deps: Bump github.com/lima-vm/lima from 1.0.7 to 1.1.1 (#1415) (95026a1)</li> <li>deps: Bump golang.org/x/crypto from 0.38.0 to 0.39.0 (#1427) (42ac01d)</li> <li>deps: Bump golang.org/x/tools from 0.33.0 to 0.34.0 (#1426) (a423697)</li> <li>deps: Bump submodules and dependencies (#1419) (1b88505)</li> </ul>"},{"location":"docs/changelog/#182-2025-05-21","title":"1.8.2 (2025-05-21)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_6","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/containerd/nerdctl/v2 from 2.0.5 to 2.1.1 (#1402) (8f0c9b4)</li> <li>deps: Bump github.com/containerd/nerdctl/v2 from 2.1.1 to 2.1.2 (#1413) (b9fd27d)</li> <li>deps: Bump golang.org/x/tools from 0.32.0 to 0.33.0 (#1399) (f35db93)</li> <li>deps: Bump submodules and dependencies (#1411) (19782e5)</li> </ul>"},{"location":"docs/changelog/#181-2025-05-14","title":"1.8.1 (2025-05-14)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_7","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/containerd/nerdctl/v2 from 2.0.4 to 2.0.5 (#1387) (8166b1a)</li> <li>deps: Bump github.com/runfinch/common-tests from 0.9.2 to 0.9.4 (#1400) (f83f6e2)</li> <li>deps: Bump golang.org/x/crypto from 0.37.0 to 0.38.0 (#1403) (7b79ed5)</li> <li>deps: Bump golang.org/x/sys from 0.32.0 to 0.33.0 (#1390) (759a616)</li> <li>deps: Bump golang.org/x/text from 0.24.0 to 0.25.0 (#1398) (c1e2093)</li> <li>deps: Bump submodules and dependencies (#1393) (8ff69da)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Ensure UTF-8 encoding for finch.yaml on windows (#1388) (86ce3b1)</li> <li>version format in finch info (#1394) (83be39a)</li> <li>version format inf finch info (83be39a)</li> </ul>"},{"location":"docs/changelog/#reverts","title":"Reverts","text":"<ul> <li>ci(deps): Bump golangci/golangci-lint-action from 7.0.0 to 8.0.0 (#1404) (a542b0d)</li> </ul>"},{"location":"docs/changelog/#180-2025-05-01","title":"1.8.0 (2025-05-01)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_8","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/docker/cli (89ad42b)</li> <li>deps: Bump github.com/docker/cli from 28.0.4+incompatible to 28.1.1+incompatible (#1374) (89ad42b)</li> <li>deps: Bump github.com/docker/docker (a6e1116)</li> <li>deps: Bump github.com/docker/docker from 28.0.4+incompatible to 28.1.1+incompatible (#1373) (a6e1116)</li> <li>deps: Bump k8s.io/apimachinery from 0.32.3 to 0.32.4 (#1379) (471be59)</li> <li>deps: Bump submodules and dependencies (#1375) (6466bcd)</li> <li>deps: Bump submodules and dependencies (#1383) (169b84f)</li> </ul>"},{"location":"docs/changelog/#features_2","title":"Features","text":"<ul> <li>add finch-daemon (#1181) (30976dd)</li> <li>Add vm disk resize and disk info commands (#1372) (442ae73)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Add Buildctl cache prune (#1367) (bd64f3d)</li> <li>image name parsing (#1386) (3dbeece)</li> </ul>"},{"location":"docs/changelog/#172-2025-04-14","title":"1.7.2 (2025-04-14)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_9","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/containerd/nerdctl/v2 from 2.0.3 to 2.0.4 (#1342) (5c34d28)</li> <li>deps: Bump github.com/docker/cli (76d4082)</li> <li>deps: Bump github.com/docker/cli from 28.0.1+incompatible to 28.0.2+incompatible (#1337) (76d4082)</li> <li>deps: Bump github.com/docker/docker and github.com/docker/cli from 28.0.2 to 28.0.4 (#1360) (ab78a0a)</li> <li>deps: Bump github.com/lima-vm/lima from 1.0.5 to 1.0.6 (#1289) (a576086)</li> <li>deps: Bump github.com/lima-vm/lima from 1.0.6 to 1.0.7 (#1350) (106061c)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.23.2 to 2.23.3 (#1348) (dae86f9)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.23.3 to 2.23.4 (#1363) (b830ddf)</li> <li>deps: Bump github.com/onsi/gomega from 1.36.2 to 1.37.0 (#1358) (81d8f34)</li> <li>deps: Bump github.com/pkg/sftp from 1.13.8 to 1.13.9 (#1353) (ce14aa7)</li> <li>deps: Bump github.com/runfinch/common-tests from 0.9.1 to 0.9.2 (#1345) (ec5949a)</li> <li>deps: Bump github.com/spf13/afero from 1.12.0 to 1.14.0 (#1343) (a365fc2)</li> <li>deps: Bump golang.org/x/tools from 0.30.0 to 0.31.0 (#1338) (78a89ad)</li> <li>deps: Bump golang.org/x/tools from 0.31.0 to 0.32.0 (#1362) (093e632)</li> <li>deps: Bump k8s.io/apimachinery from 0.31.4 to 0.32.3 (#1319) (9280536)</li> <li>deps: Bump submodules and dependencies (#1346) (a112465)</li> </ul>"},{"location":"docs/changelog/#171-2025-03-19","title":"1.7.1 (2025-03-19)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_10","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.36.1 to 1.36.2 (#1296) (0ab4f6c)</li> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.36.2 to 1.36.3 (#1307) (2f91a52)</li> <li>deps: Bump github.com/containerd/containerd from 1.7.25 to 1.7.27 (#1328) (33f0368)</li> <li>deps: Bump github.com/containerd/containerd/v2 (eb5e7ad)</li> <li>deps: Bump github.com/containerd/containerd/v2 from 2.0.2 to 2.0.4 (#1327) (eb5e7ad)</li> <li>deps: Bump github.com/docker/cli (f29502a)</li> <li>deps: Bump github.com/docker/cli from 27.5.1+incompatible to 28.0.1+incompatible (#1303) (f29502a)</li> <li>deps: Bump github.com/docker/docker (653eb2f)</li> <li>deps: Bump github.com/docker/docker from 27.5.1+incompatible to 28.0.1+incompatible (#1305) (653eb2f)</li> <li>deps: Bump github.com/go-jose/go-jose/v4 from 4.0.4 to 4.0.5 (#1298) (7b5938f)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.22.2 to 2.23.0 (#1332) (6b4011f)</li> <li>deps: Bump github.com/spf13/cobra from 1.8.1 to 1.9.1 (#1293) (7314a96)</li> <li>deps: Bump golang.org/x/sync from 0.11.0 to 0.12.0 (#1312) (b77aa58)</li> <li>deps: Bump submodules and dependencies (#1287) (2bc1795)</li> <li>deps: Bump the golang-x group with 3 updates (#1326) (dd66983)</li> </ul>"},{"location":"docs/changelog/#170-2025-02-11","title":"1.7.0 (2025-02-11)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_11","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.32.7 to 1.36.0 (#1266) (4498d21)</li> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.36.0 to 1.36.1 (#1274) (1aa6c97)</li> <li>deps: Bump github.com/containerd/nerdctl/v2 from 2.0.0 to 2.0.3 (#1212) (3a207c1)</li> <li>deps: Bump github.com/docker/cli from 27.5.0+incompatible to 27.5.1+incompatible (#1275) (5c52f7d)</li> <li>deps: Bump github.com/docker/docker from 27.4.1+incompatible to 27.5.1+incompatible (#1253) (ab34181)</li> <li>deps: Bump github.com/lima-vm/lima from 0.23.2 to 1.0.4 (#1230) (67ab6f8)</li> <li>deps: Bump github.com/lima-vm/lima from 1.0.4 to 1.0.5 (#1279) (8a377dc)</li> <li>deps: Bump github.com/spf13/afero from 1.11.0 to 1.12.0 (#1271) (10db65d)</li> <li>deps: Bump golang.org/x/crypto from 0.32.0 to 0.33.0 (#1280) (88ae5ed)</li> <li>deps: Bump golang.org/x/sys from 0.29.0 to 0.30.0 (#1277) (6b0328a)</li> <li>deps: Bump golang.org/x/text from 0.21.0 to 0.22.0 (#1270) (77ed636)</li> <li>deps: Bump golang.org/x/tools from 0.28.0 to 0.29.0 (#1256) (87a9827)</li> <li>deps: Bump golang.org/x/tools from 0.29.0 to 0.30.0 (#1284) (e521a09)</li> <li>deps: Bump submodules and dependencies (#1249) (b015c66)</li> </ul>"},{"location":"docs/changelog/#features_3","title":"Features","text":"<ul> <li>allow other credential helpers in Finch VM (#1265) (515a693)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>conflict in parsing of -h flag for help and hostname in container run (8b8df27)</li> <li>conflict in parsing of -h flag for help and hostname in container run  (#1251) (8b8df27)</li> <li>formatting for byo credential helper bashrc (#1278) (b1c7d6e)</li> </ul>"},{"location":"docs/changelog/#161-2025-01-17","title":"1.6.1 (2025-01-17)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_12","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/docker/cli from 27.3.1+incompatible to 27.4.1+incompatible (#1229) (1c99948)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.22.1 to 2.22.2 (#1236) (2151c9f)</li> <li>deps: Bump golang.org/x/sys from 0.28.0 to 0.29.0 (#1245) (0340b25)</li> <li>deps: Bump submodules and dependencies (#1238) (4b20a2f)</li> </ul>"},{"location":"docs/changelog/#reverts_1","title":"Reverts","text":"<ul> <li>\"ci: add generate log files and upload to S3 bucket  (#1194)\" (#1243) (fba3aa6)</li> </ul>"},{"location":"docs/changelog/#160-2025-01-06","title":"1.6.0 (2025-01-06)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_13","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/onsi/gomega from 1.36.1 to 1.36.2 (#1227) (0c0fbef)</li> </ul>"},{"location":"docs/changelog/#features_4","title":"Features","text":"<ul> <li>integrate nerdctl v2.0.2 (b644b3e)</li> <li>integrate nerdctl v2.0.2 container runtime archive (#1237) (b644b3e)</li> <li>use finch-core container runtime archive (#1232) (0fde2a9)</li> </ul>"},{"location":"docs/changelog/#150-2024-12-25","title":"1.5.0 (2024-12-25)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_14","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.32.5 to 1.32.7 (#1224) (6be5aa7)</li> <li>deps: Bump github.com/docker/docker from 27.3.1+incompatible to 27.4.1+incompatible (#1220) (8a72057)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.22.0 to 2.22.1 (#1225) (18accb8)</li> <li>deps: Bump golang.org/x/crypto from 0.29.0 to 0.31.0 (#1215) (7df9beb)</li> <li>deps: Bump submodules and dependencies (#1219) (25117e5)</li> <li>deps: Bump submodules and dependencies (#1226) (71e0620)</li> </ul>"},{"location":"docs/changelog/#features_5","title":"Features","text":"<ul> <li>make finch config available in VM at $HOME/.finch (#1180) (a2fd94c)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Update go mod to fix CVE-2024-45338 (#1222) (c0e8050)</li> </ul>"},{"location":"docs/changelog/#143-2024-12-10","title":"1.4.3 (2024-12-10)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_15","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump golang.org/x/sys from 0.27.0 to 0.28.0 (#1206) (d573949)</li> <li>deps: Bump submodules and dependencies (#1211) (ddcec1c)</li> </ul>"},{"location":"docs/changelog/#142-2024-12-03","title":"1.4.2 (2024-12-03)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_16","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.32.2 to 1.32.3 (#1159) (6ef662f)</li> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.32.3 to 1.32.5 (#1189) (a54ffe6)</li> <li>deps: Bump github.com/containerd/nerdctl/v2 from 2.0.0-rc.2 to 2.0.0-rc.3 (#1151) (7f3a579)</li> <li>deps: Bump github.com/containerd/nerdctl/v2 from 2.0.0-rc.3 to 2.0.0 (#1172) (ec5b8ee)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.20.2 to 2.21.0 (#1162) (e066388)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.21.0 to 2.22.0 (#1196) (6e9bae8)</li> <li>deps: Bump github.com/onsi/gomega from 1.34.2 to 1.35.1 (#1164) (6540a4f)</li> <li>deps: Bump github.com/onsi/gomega from 1.35.1 to 1.36.0 (#1199) (0c143a9)</li> <li>deps: Bump github.com/pkg/sftp from 1.13.6 to 1.13.7 (#1150) (3747442)</li> <li>deps: Bump github.com/stretchr/testify from 1.9.0 to 1.10.0 (#1198) (712b6a4)</li> <li>deps: Bump golang.org/x/crypto from 0.28.0 to 0.29.0 (#1192) (4938dfb)</li> <li>deps: Bump golang.org/x/tools from 0.26.0 to 0.27.0 (#1191) (e6ba6e8)</li> <li>deps: Bump k8s.io/apimachinery from 0.31.1 to 0.31.2 (#1147) (c7c5d81)</li> <li>deps: Bump k8s.io/apimachinery from 0.31.2 to 0.31.3 (#1195) (540fae7)</li> <li>deps: Bump submodules and dependencies (#1160) (c6bf4e8)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Add retries and fix vm init (#1184) (7649623)</li> <li>add unit test coverage (#1166) (507d636)</li> <li>Refactor VM lifecycle test for flakiness (#1187) (2978275)</li> </ul>"},{"location":"docs/changelog/#141-2024-10-24","title":"1.4.1 (2024-10-24)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_17","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.32.1 to 1.32.2 (#1137) (6576052)</li> <li>deps: Bump submodules and dependencies (#1144) (8fbaf1c)</li> </ul>"},{"location":"docs/changelog/#140-2024-10-08","title":"1.4.0 (2024-10-08)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_18","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.31.0 to 1.32.1 (#1134) (a55450f)</li> <li>deps: Bump golang.org/x/tools from 0.25.0 to 0.26.0 (#1130) (633c1bf)</li> </ul>"},{"location":"docs/changelog/#features_6","title":"Features","text":"<ul> <li>Add BindMount handler for Linux (#1119) (a49df29)</li> <li>Add Dockercompat Mode &amp; DevContainer Support (#1100) (c004516)</li> <li>add finch version output to support-bundle (#1124) (33d519b)</li> <li>Add More PassedEnvs for ECR CredHelper (#1132) (0cb6a55)</li> <li>allow user configurable docker compose version env variable (#1133) (69b066b)</li> <li>handle dockercompat inspect for devcontainers (#1121) (5ba7305)</li> <li>macOS: Support host DNS aliases for macos (#1085) (6b7f053)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>check config file before accessing values (#1120) (5a47eec)</li> </ul>"},{"location":"docs/changelog/#131-2024-09-27","title":"1.3.1 (2024-09-27)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_19","title":"Build System or External Dependencies","text":"<ul> <li>trigger new release-please build (6ef2e6b)</li> <li>trigger new release-please PR (#1114) (6ef2e6b)</li> </ul>"},{"location":"docs/changelog/#130-2024-09-24","title":"1.3.0 (2024-09-24)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_20","title":"Build System or External Dependencies","text":"<ul> <li>deps: bump github.com/aws/aws-sdk-go-v2 from 1.30.3 to 1.30.4 (#1064) (51089f6)</li> <li>deps: bump github.com/aws/aws-sdk-go-v2 from 1.30.4 to 1.30.5 (#1083) (e4d4640)</li> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.30.5 to 1.31.0 (#1108) (b412103)</li> <li>deps: bump github.com/containerd/nerdctl/v2 from 2.0.0-rc.1 to 2.0.0-rc.2 (#1091) (51c006d)</li> <li>deps: bump github.com/docker/cli from 27.1.2+incompatible to 27.2.0+incompatible (#1074) (87bc728)</li> <li>deps: bump github.com/docker/cli from 27.2.0+incompatible to 27.2.1+incompatible (#1088) (0de5d1d)</li> <li>deps: Bump github.com/docker/cli from 27.2.1+incompatible to 27.3.1+incompatible (#1106) (397c71c)</li> <li>deps: bump github.com/docker/docker from 27.1.1+incompatible to 27.1.2+incompatible (#1061) (801f825)</li> <li>deps: bump github.com/docker/docker from 27.1.2+incompatible to 27.2.0+incompatible (#1073) (726dc07)</li> <li>deps: Bump github.com/docker/docker from 27.2.1+incompatible to 27.3.1+incompatible (#1105) (aa0c15a)</li> <li>deps: bump github.com/lima-vm/lima from 0.22.0 to 0.23.1 (#1066) (09d7355)</li> <li>deps: bump github.com/lima-vm/lima from 0.23.1 to 0.23.2 (#1077) (0a02a4b)</li> <li>deps: bump github.com/onsi/ginkgo/v2 from 2.20.0 to 2.20.2 (#1075) (81af756)</li> <li>deps: bump github.com/onsi/gomega from 1.34.1 to 1.34.2 (#1076) (e04a072)</li> <li>deps: bump golang.org/x/sys from 0.24.0 to 0.25.0 (#1084) (9ace518)</li> <li>deps: bump golang.org/x/text from 0.17.0 to 0.18.0 (#1082) (52b1ba3)</li> <li>deps: bump golang.org/x/tools from 0.24.0 to 0.25.0 (#1090) (c382e22)</li> <li>deps: bump k8s.io/apimachinery from 0.30.3 to 0.31.0 (#1060) (2c22e72)</li> <li>deps: bump k8s.io/apimachinery from 0.31.0 to 0.31.1 (#1093) (35bc4dc)</li> <li>deps: Bump submodules and dependencies (#1111) (53f608f)</li> <li>deps: update nerdctl-full and soci versions (#1097) (a4b9679)</li> <li>linux: add Linux packaging and e2e tests (#1071) (985570e)</li> </ul>"},{"location":"docs/changelog/#features_7","title":"Features","text":"<ul> <li>add exit status code to finch (5fa30f4)</li> <li>Add exit status code to finch (#1068) (5fa30f4)</li> <li>add Linux support (#1023) (82f698b)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>allow finch commands to run using default config (#1109) (4b57a00)</li> <li>Improve CLI parsing for Image Args (#1072) (6d49ac7)</li> <li>linux: DOCKER_CONFIG path (#1102) (5b45b75)</li> <li>linux: support bundles (#1101) (f32a97f)</li> </ul>"},{"location":"docs/changelog/#reverts_2","title":"Reverts","text":"<ul> <li>linux: DOCKER_CONFIG path (#1102) (#1110) (839221c)</li> </ul>"},{"location":"docs/changelog/#123-2024-08-13","title":"1.2.3 (2024-08-13)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_21","title":"Build System or External Dependencies","text":"<ul> <li>deps: bump github.com/aws/aws-sdk-go-v2 from 1.30.1 to 1.30.3 (#1028) (dcb3865)</li> <li>deps: bump github.com/docker/cli from 27.0.3+incompatible to 27.1.0+incompatible (#1041) (187dd56)</li> <li>deps: bump github.com/docker/cli from 27.1.0+incompatible to 27.1.1+incompatible (#1045) (9e9dec8)</li> <li>deps: bump github.com/docker/docker from 27.0.3+incompatible to 27.1.0+incompatible (#1042) (942b639)</li> <li>deps: bump github.com/docker/docker from 27.1.0+incompatible to 27.1.1+incompatible (#1044) (d33cb5d)</li> <li>deps: bump github.com/onsi/ginkgo/v2 from 2.19.0 to 2.19.1 (#1046) (39bba35)</li> <li>deps: bump github.com/onsi/ginkgo/v2 from 2.19.1 to 2.20.0 (#1057) (221a935)</li> <li>deps: bump github.com/onsi/gomega from 1.33.1 to 1.34.1 (#1048) (66ceee4)</li> <li>deps: bump golang.org/x/crypto from 0.25.0 to 0.26.0 (#1054) (2ecab35)</li> <li>deps: bump golang.org/x/sys from 0.22.0 to 0.23.0 (#1051) (c6402ab)</li> <li>deps: bump golang.org/x/sys from 0.23.0 to 0.24.0 (#1059) (9529346)</li> <li>deps: bump golang.org/x/tools from 0.23.0 to 0.24.0 (#1056) (3a34c79)</li> <li>deps: bump k8s.io/apimachinery from 0.30.2 to 0.30.3 (#1036) (0c5686e)</li> <li>deps: Bump submodules and dependencies (#1027) (966b8d2)</li> <li>deps: Bump submodules and dependencies (#1035) (4fe6fcf)</li> <li>fix: pass arch to finch-core install.dependencies target (#1034) (fa5078f)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>remove llvm copy to fix build errors (#1030) (5104857)</li> <li>typo causing error while downloading license (#1033) (2452614)</li> </ul>"},{"location":"docs/changelog/#122-2024-07-09","title":"1.2.2 (2024-07-09)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_22","title":"Build System or External Dependencies","text":"<ul> <li>deps: bump github.com/aws/aws-sdk-go-v2 from 1.30.0 to 1.30.1 (#1004) (0174b05)</li> <li>deps: bump golang.org/x/crypto from 0.24.0 to 0.25.0 (#1016) (b7c711a)</li> <li>deps: bump golang.org/x/tools from 0.22.0 to 0.23.0 (#1019) (81b2446)</li> <li>deps: Bump submodules and dependencies (#1020) (30d8e69)</li> <li>deps: Bump submodules and dependencies (#1021) (fd1677b)</li> </ul>"},{"location":"docs/changelog/#121-2024-07-02","title":"1.2.1 (2024-07-02)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_23","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.27.0 to 1.27.1 (#963) (4c2dc12)</li> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.27.1 to 1.27.2 (#974) (54aa67c)</li> <li>deps: bump github.com/aws/aws-sdk-go-v2 from 1.27.2 to 1.30.0 (#991) (bbcb8e7)</li> <li>deps: Bump github.com/docker/cli from 26.1.3+incompatible to 26.1.4+incompatible (#973) (f774e2d)</li> <li>deps: bump github.com/docker/cli from 26.1.4+incompatible to 27.0.2+incompatible (#999) (0244698)</li> <li>deps: bump github.com/docker/cli from 27.0.2+incompatible to 27.0.3+incompatible (#1005) (c801e69)</li> <li>deps: Bump github.com/docker/docker from 26.1.3+incompatible to 26.1.4+incompatible (#972) (05b9c05)</li> <li>deps: bump github.com/docker/docker from 26.1.4+incompatible to 27.0.1+incompatible (#996) (1f68260)</li> <li>deps: bump github.com/docker/docker from 27.0.1+incompatible to 27.0.2+incompatible (#1001) (50a639b)</li> <li>deps: bump github.com/docker/docker from 27.0.2+incompatible to 27.0.3+incompatible (#1006) (537abad)</li> <li>deps: bump github.com/spf13/cobra from 1.8.0 to 1.8.1 (#983) (7b2bed6)</li> <li>deps: bump golang.org/x/image from 0.12.0 to 0.18.0 (#998) (398658e)</li> <li>deps: Bump golang.org/x/text from 0.15.0 to 0.16.0 (#964) (8a3973a)</li> <li>deps: Bump golang.org/x/tools from 0.21.0 to 0.22.0 (#967) (3921b00)</li> <li>deps: bump k8s.io/apimachinery from 0.30.1 to 0.30.2 (#981) (c8ebf20)</li> <li>deps: Bump submodules and dependencies (#1008) (6134a5a)</li> <li>deps: Bump submodules and dependencies (#949) (b5ee424)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>add SOCI snapshotter hash check (#985) (563f346)</li> <li>Allow to use the COMPOSE_FILE variable in finch compose (#994) (17d4bc8)</li> <li>Enable <code>finch support-bundle generate</code> to execute on Windows whe\u2026 (#976) (9c1caf0)</li> <li>update snapshotters reference (#986) (06b9027)</li> <li>verify shasum for finch dependencies (#969) (9d85f25)</li> </ul>"},{"location":"docs/changelog/#120-2024-06-03","title":"1.2.0 (2024-06-03)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_24","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.26.0 to 1.26.1 (#882) (c059d9e)</li> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.26.1 to 1.27.0 (#954) (b06280c)</li> <li>deps: Bump github.com/docker/cli from 26.0.0+incompatible to 26.0.1+incompatible (#894) (680e23f)</li> <li>deps: Bump github.com/docker/cli from 26.0.1+incompatible to 26.0.2+incompatible (#906) (6fc6ce5)</li> <li>deps: Bump github.com/docker/cli from 26.0.2+incompatible to 26.1.0+incompatible (#913) (bfeb585)</li> <li>deps: Bump github.com/docker/cli from 26.1.0+incompatible to 26.1.1+incompatible (#922) (7b6b3d2)</li> <li>deps: Bump github.com/docker/cli from 26.1.1+incompatible to 26.1.2+incompatible (#941) (eec3462)</li> <li>deps: Bump github.com/docker/cli from 26.1.2+incompatible to 26.1.3+incompatible (#952) (9a94c57)</li> <li>deps: Bump github.com/docker/docker from 26.0.0+incompatible to 26.0.1+incompatible (#892) (05610c1)</li> <li>deps: Bump github.com/docker/docker from 26.0.1+incompatible to 26.0.2+incompatible (#905) (69e7d0b)</li> <li>deps: Bump github.com/docker/docker from 26.0.2+incompatible to 26.1.0+incompatible (#912) (5e5f8a8)</li> <li>deps: Bump github.com/docker/docker from 26.1.0+incompatible to 26.1.1+incompatible (#924) (79eb863)</li> <li>deps: Bump github.com/docker/docker from 26.1.1+incompatible to 26.1.2+incompatible (#940) (aa3ab01)</li> <li>deps: Bump github.com/docker/docker from 26.1.2+incompatible to 26.1.3+incompatible (#951) (cef9d8f)</li> <li>deps: Bump github.com/lima-vm/lima from 0.21.0 to 0.22.0 (#934) (62d67d5)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.17.1 to 2.17.2 (#920) (939639e)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.17.2 to 2.17.3 (#933) (c56019d)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.17.3 to 2.19.0 (#959) (08d7a34)</li> <li>deps: Bump github.com/onsi/gomega from 1.33.0 to 1.33.1 (#923) (e7f4e0d)</li> <li>deps: Bump github.com/runfinch/common-tests from 0.7.18 to 0.7.21 (#878) (e1cbd0a)</li> <li>deps: Bump github.com/runfinch/common-tests from 0.7.21 to 0.7.22 (#907) (84b4a69)</li> <li>deps: Bump github.com/shirou/gopsutil/v3 from 3.24.2 to 3.24.3 (#881) (465e369)</li> <li>deps: Bump github.com/shirou/gopsutil/v3 from 3.24.3 to 3.24.4 (#925) (8cd5643)</li> <li>deps: Bump github.com/shirou/gopsutil/v3 from 3.24.4 to 3.24.5 (#962) (8e51db3)</li> <li>deps: Bump github.com/tc-hib/go-winres from 0.3.1 to 0.3.3 (#893) (ebb4c9f)</li> <li>deps: Bump golang.org/x/crypto from 0.22.0 to 0.23.0 (#928) (1687293)</li> <li>deps: Bump golang.org/x/text from 0.14.0 to 0.15.0 (#929) (85e1bec)</li> <li>deps: Bump golang.org/x/tools from 0.19.0 to 0.20.0 (#889) (cfac010)</li> <li>deps: Bump golang.org/x/tools from 0.20.0 to 0.21.0 (#932) (a853a8a)</li> <li>deps: Bump k8s.io/apimachinery from 0.29.3 to 0.30.0 (#904) (f8b7f25)</li> <li>deps: Bump k8s.io/apimachinery from 0.30.0 to 0.30.1 (#946) (dc4ebf9)</li> <li>deps: Bump submodules and dependencies (#874) (a9f73be)</li> <li>deps: Bump submodules and dependencies (#895) (c7388bb)</li> <li>unify macos/windows yamls (#921) (86d9a23)</li> </ul>"},{"location":"docs/changelog/#features_8","title":"Features","text":"<ul> <li>Add the --format option to the finch version command (#926) (a9d04e3)</li> <li>make Virtualization Framework default (#956) (75b69b8)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>add finch vm settings subcommand (#887) (8e809cc)</li> <li>Remove unnecessary error handling (#961) (f441fc9)</li> </ul>"},{"location":"docs/changelog/#113-2024-03-28","title":"1.1.3 (2024-03-28)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_25","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.25.0 to 1.25.2 (#831) (9eb8097)</li> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.25.2 to 1.25.3 (#856) (e9314f0)</li> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.25.3 to 1.26.0 (#864) (9223219)</li> <li>deps: Bump github.com/docker/cli from 25.0.3+incompatible to 25.0.4+incompatible (#857) (838fc07)</li> <li>deps: Bump github.com/docker/cli from 25.0.4+incompatible to 26.0.0+incompatible (#867) (4167d3d)</li> <li>deps: Bump github.com/docker/docker from 25.0.3+incompatible to 25.0.4+incompatible (#845) (769ae32)</li> <li>deps: Bump github.com/docker/docker from 25.0.4+incompatible to 26.0.0+incompatible (#866) (7fa6e72)</li> <li>deps: Bump github.com/lima-vm/lima from 0.20.1 to 0.20.2 (#855) (99d4c3c)</li> <li>deps: Bump github.com/lima-vm/lima from 0.20.2 to 0.21.0 (#862) (120ffcc)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.15.0 to 2.16.0 (#842) (8e04421)</li> <li>deps: Bump github.com/onsi/gomega from 1.31.1 to 1.32.0 (#860) (b2c9449)</li> <li>deps: Bump github.com/runfinch/common-tests from 0.7.13 to 0.7.14 (#834) (2287575)</li> <li>deps: Bump github.com/shirou/gopsutil/v3 from 3.24.1 to 3.24.2 (#838) (d2612aa)</li> <li>deps: Bump github.com/stretchr/testify from 1.8.4 to 1.9.0 (#839) (9f0953d)</li> <li>deps: Bump golang.org/x/crypto from 0.19.0 to 0.20.0 (#833) (1ed1474)</li> <li>deps: Bump golang.org/x/crypto from 0.20.0 to 0.21.0 (#843) (b7ef6f2)</li> <li>deps: Bump golang.org/x/tools from 0.18.0 to 0.19.0 (#844) (f8883b2)</li> <li>deps: Bump google.golang.org/protobuf from 1.32.0 to 1.33.0 (#858) (14532d5)</li> <li>deps: Bump k8s.io/apimachinery from 0.29.2 to 0.29.3 (#863) (c8a4262)</li> <li>deps: Bump submodules and dependencies (#825) (8828c56)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>parse management commands with proper arguments (#876) (e2f42fe)</li> <li>Reset disks and force remove vm after suite execution (#846) (c2363b1)</li> </ul>"},{"location":"docs/changelog/#112-2024-02-20","title":"1.1.2 (2024-02-20)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_26","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/docker/docker from 25.0.1+incompatible to 25.0.3+incompatible (#799) (d761301)</li> <li>deps: Bump github.com/goccy/go-yaml from 1.11.2 to 1.11.3 (#780) (2e616ff)</li> <li>deps: Bump github.com/shirou/gopsutil/v3 from 3.23.12 to 3.24.1 (#787) (55f6d92)</li> <li>deps: Bump golang.org/x/crypto from 0.18.0 to 0.19.0 (#806) (3fbc87c)</li> <li>deps: Bump golang.org/x/tools from 0.17.0 to 0.18.0 (#807) (7323751)</li> <li>deps: Bump k8s.io/apimachinery from 0.29.1 to 0.29.2 (#820) (6ca0f7f)</li> <li>deps: Bump submodules and dependencies (#795) (ec77f1a)</li> <li>deps: Bump submodules and dependencies (#805) (0bf9148)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>Correct typo in type name of struct (NerdctlClientOuput) (#743) (13de2b9)</li> <li>Env variable CONTAINERD_SNAPSHOTTER cleared on overlayfs and ref\u2026 (#816) (d222a34)</li> <li>msi release tests cleanup (#819) (0f23660)</li> <li>stop Finch on uninstall (#818) (a96788b)</li> <li>windows-installer: add new cleanup script on install (#824) (fccfa1d)</li> <li>windows-installer: ignore FilesInUse/Restart dialogue (#823) (f64835d)</li> <li>windows-installer: uninstall script behavior (#822) (ace37ea)</li> </ul>"},{"location":"docs/changelog/#reverts_3","title":"Reverts","text":"<ul> <li>\"always force stop when using Virtualization.framework\" (#370) (cb3051e)</li> </ul>"},{"location":"docs/changelog/#111-2024-02-01","title":"1.1.1 (2024-02-01)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_27","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump submodules and dependencies (#762) (4889527)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>add force to cni cleanup on boot service (#785) (9b2438b)</li> </ul>"},{"location":"docs/changelog/#110-2024-01-31","title":"1.1.0 (2024-01-31)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_28","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/aws/aws-sdk-go-v2 from 1.24.0 to 1.24.1 (#749) (c3ae967)</li> <li>deps: Bump github.com/containerd/containerd from 1.7.10 to 1.7.11 (#742) (7d1e250)</li> <li>deps: Bump github.com/docker/docker from 24.0.7+incompatible to 25.0.1+incompatible (#772) (b16f6ae)</li> <li>deps: Bump github.com/lima-vm/lima from 0.19.0 to 0.20.0 (#769) (7f0c86e)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.13.2 to 2.14.0 (#758) (7d3a7c8)</li> <li>deps: Bump github.com/onsi/gomega from 1.30.0 to 1.31.1 (#768) (889abf8)</li> <li>deps: Bump github.com/runfinch/common-tests from 0.7.11 to 0.7.12 (#761) (bb17a96)</li> <li>deps: Bump github.com/shirou/gopsutil/v3 from 3.23.11 to 3.23.12 (#744) (eb55877)</li> <li>deps: Bump golang.org/x/crypto from 0.16.0 to 0.18.0 (#751) (fc434ac)</li> <li>deps: Bump golang.org/x/image from 0.0.0-20210220032944-ac19c3e999fb to 0.10.0 (#752) (9a08b45)</li> <li>deps: Bump golang.org/x/tools from 0.16.0 to 0.16.1 (#734) (efecfca)</li> <li>deps: Bump golang.org/x/tools from 0.16.1 to 0.17.0 (#757) (89623da)</li> <li>deps: Bump submodules and dependencies (#733) (8b2d8cd)</li> </ul>"},{"location":"docs/changelog/#experimental","title":"Experimental","text":"<ul> <li>make finch work on windows with wsl2 (#649) (31cdc41)</li> </ul>"},{"location":"docs/changelog/#features_9","title":"Features","text":"<ul> <li>upgrade Windows support to \"feature\" (#778) (63894d1)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>properly reload persistent snapshotter data and restart services (#767) (700cb92)</li> <li>temporarily switch to our own nerdctl-full bundle with patched runc and buildkit (#783) (f677e2e)</li> </ul>"},{"location":"docs/changelog/#101-2023-12-11","title":"1.0.1 (2023-12-11)","text":""},{"location":"docs/changelog/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>Change the default behavoir for deleting .finch folder to false when uninstall (#732) (e818743)</li> <li>Clean up all previous finch version installation registries in postinstall and uninstall (#688) (9afc0b9)</li> <li>Fix to be able to run finch build with --ssh option (#696) (4d1e6cf)</li> <li>Fix to delete ~/.finch when uninstalling finch (#703) (8d7389f)</li> <li>remove virtual machine image when running make clean (98c8ee4)</li> <li>resolve shellcheck warnings (#684) (d9f695a)</li> <li>Use LimaUser method instead of host user name (#712) (7c02e08)</li> </ul>"},{"location":"docs/changelog/#reverts_4","title":"Reverts","text":"<ul> <li>\"fix: resolve shellcheck warnings\" (#725) (8ea255a)</li> </ul>"},{"location":"docs/changelog/#100-2023-10-31","title":"1.0.0 (2023-10-31)","text":""},{"location":"docs/changelog/#chore","title":"chore","text":"<ul> <li>update Release-As version to 1.0.0 (not-squashed) (2c97323)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>ecr credential helper hash check (#668) (4b1b0a2)</li> <li>ecr creds helper and credential_process (#510) (0525753)</li> <li>improve creds helper UX (#673) (bc238cf)</li> <li>run SOCI as a systemd service (#667) (24fd649)</li> <li>soci being reset on vm stop/start (#672) (9df7d32)</li> </ul>"},{"location":"docs/changelog/#build-system-or-external-dependencies_29","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/docker/cli from 24.0.6+incompatible to 24.0.7+incompatible (#665) (43a57ff)</li> <li>deps: Bump github.com/docker/docker from 24.0.6+incompatible to 24.0.7+incompatible (#666) (4e06d28)</li> <li>deps: Bump github.com/lima-vm/lima from 0.17.2 to 0.18.0 (#643) (f181b89)</li> <li>deps: Bump github.com/onsi/gomega from 1.27.10 to 1.28.0 (#583) (9d1ad57)</li> <li>deps: Bump github.com/runfinch/common-tests from 0.7.6 to 0.7.7 (#609) (e21ae83)</li> <li>deps: Bump github.com/runfinch/common-tests from 0.7.7 to 0.7.8 (#617) (4d942f5)</li> <li>deps: Bump github.com/shirou/gopsutil/v3 from 3.23.8 to 3.23.9 (#588) (20385b7)</li> <li>deps: Bump golang.org/x/tools from 0.13.0 to 0.14.0 (#610) (8938cf3)</li> <li>deps: Bump google.golang.org/grpc from 1.53.0 to 1.56.3 (#658) (321487c)</li> <li>deps: Bump k8s.io/apimachinery from 0.28.2 to 0.28.3 (#652) (05f9d53)</li> <li>deps: Bump submodules and dependencies (#637) (b094751)</li> </ul>"},{"location":"docs/changelog/#090-2023-09-25","title":"0.9.0 (2023-09-25)","text":""},{"location":"docs/changelog/#features_10","title":"Features","text":"<ul> <li>support push with SOCI (#578) (69721b7)</li> <li>supports adding files inside the VM to support bundles (#549) (3b1df46)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_19","title":"Bug Fixes","text":"<ul> <li>enables bridge-nf-call-iptables by default (#539) (6ea1499)</li> <li>Makefile: use POSIX tar syntax for stdin (#529) (e222131)</li> </ul>"},{"location":"docs/changelog/#build-system-or-external-dependencies_30","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/docker/cli from 24.0.5+incompatible to 24.0.6+incompatible (#560) (21bb893)</li> <li>deps: Bump github.com/docker/docker from 24.0.5+incompatible to 24.0.6+incompatible (#561) (e0160be)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.11.0 to 2.12.0 (#542) (8536481)</li> <li>deps: Bump github.com/runfinch/common-tests from 0.7.2 to 0.7.3 (#548) (a054ef3)</li> <li>deps: Bump github.com/shirou/gopsutil/v3 from 3.23.7 to 3.23.8 (#552) (cf9399a)</li> <li>deps: Bump golang.org/x/crypto from 0.12.0 to 0.13.0 (#558) (f24264d)</li> <li>deps: Bump golang.org/x/tools from 0.12.0 to 0.13.0 (#559) (0f56d23)</li> <li>deps: Bump k8s.io/apimachinery from 0.28.0 to 0.28.1 (#543) (675f76f)</li> <li>deps: Bump k8s.io/apimachinery from 0.28.1 to 0.28.2 (#568) (915d658)</li> <li>deps: Bump submodules and dependencies (#544) (94b7497)</li> <li>deps: Bump submodules and dependencies (#551) (baf645f)</li> <li>deps: Bump submodules and dependencies (#565) (c02413f)</li> <li>deps: Bump submodules and dependencies (#567) (f70314e)</li> </ul>"},{"location":"docs/changelog/#080-2023-08-16","title":"0.8.0 (2023-08-16)","text":""},{"location":"docs/changelog/#features_11","title":"Features","text":"<ul> <li>adding config option for SOCI installation on VM (#506) (a2e077b)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_20","title":"Bug Fixes","text":"<ul> <li>configure aws creds in sync submodules/deps action (#518) (b67452e)</li> <li>give pull request write permissions to sync job (#520) (55b5235)</li> <li>give token write perms to sync-submodules (#519) (8b639ea)</li> <li>Mount /var/folders to finch vm (#525) (c97d2e9)</li> <li>option to use installed lima for SOCI e2e tests (#533) (8b66659)</li> <li>quote recursive calls to make (#515) (d603096)</li> <li>Restart buildkit after containerd when provisioning (#461) (fca1828)</li> </ul>"},{"location":"docs/changelog/#build-system-or-external-dependencies_31","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/docker/cli from 24.0.4+incompatible to 24.0.5+incompatible (#495) (e9e8617)</li> <li>deps: Bump github.com/docker/docker from 24.0.4+incompatible to 24.0.5+incompatible (#497) (6f1afbb)</li> <li>deps: Bump github.com/lima-vm/lima from 0.16.0 to 0.17.2 (#531) (6e33d15)</li> <li>deps: Bump github.com/onsi/gomega from 1.27.8 to 1.27.10 (#496) (d08d102)</li> <li>deps: Bump github.com/pkg/sftp from 1.13.5 to 1.13.6 (#530) (09b3846)</li> <li>deps: Bump github.com/shirou/gopsutil/v3 from 3.23.6 to 3.23.7 (#513) (83bd718)</li> <li>deps: Bump golang.org/x/tools from 0.11.0 to 0.11.1 (#509) (e826bcf)</li> <li>deps: Bump golang.org/x/tools from 0.11.1 to 0.12.0 (#523) (09d6514)</li> <li>deps: Bump k8s.io/apimachinery from 0.27.3 to 0.27.4 (#487) (444bbc0)</li> <li>deps: Bump k8s.io/apimachinery from 0.27.4 to 0.28.0 (#535) (8df84cf)</li> <li>deps: Bump submodules and dependencies (#521) (1b3ad94)</li> </ul>"},{"location":"docs/changelog/#070-2023-07-18","title":"0.7.0 (2023-07-18)","text":""},{"location":"docs/changelog/#features_12","title":"Features","text":"<ul> <li>ECR credential integration into Finch  (#462) (d3514b3)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_21","title":"Bug Fixes","text":"<ul> <li>Add cleanup script to Makefile (#444) (da91f87)</li> </ul>"},{"location":"docs/changelog/#build-system-or-external-dependencies_32","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/docker/docker from 24.0.2+incompatible to 24.0.4+incompatible (#469) (ad37f4f)</li> <li>deps: Bump github.com/docker/docker from 24.0.2+incompatible to 24.0.4+incompatible (#481) (15d2a4b)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.10.0 to 2.11.0 (#456) (f7e0916)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.9.7 to 2.10.0 (#449) (a415e3e)</li> <li>deps: Bump github.com/onsi/gomega from 1.27.7 to 1.27.8 (#448) (96fc8d0)</li> <li>deps: Bump github.com/runfinch/common-tests from 0.7.0 to 0.7.1 (#477) (54c03bb)</li> <li>deps: Bump github.com/shirou/gopsutil/v3 from 3.23.5 to 3.23.6 (#464) (43a6720)</li> <li>deps: Bump github.com/sirupsen/logrus from 1.9.2 to 1.9.3 (#446) (1823677)</li> <li>deps: Bump golang.org/x/crypto from 0.10.0 to 0.11.0 (#465) (dc5a3e7)</li> <li>deps: Bump golang.org/x/crypto from 0.9.0 to 0.10.0 (#451) (fef6e77)</li> <li>deps: Bump golang.org/x/tools from 0.10.0 to 0.11.0 (#466) (a8b32f9)</li> <li>deps: Bump golang.org/x/tools from 0.9.3 to 0.10.0 (#455) (e321f1d)</li> <li>deps: Bump k8s.io/apimachinery from 0.27.2 to 0.27.3 (#454) (d6746a4)</li> <li>deps: Bump lima version (#476) (7b330d3)</li> <li>deps: Bump submodules (#482) (92f2494)</li> </ul>"},{"location":"docs/changelog/#062-2023-06-02","title":"0.6.2 (2023-06-02)","text":""},{"location":"docs/changelog/#bug-fixes_22","title":"Bug Fixes","text":"<ul> <li>sort volume args in DOCKER_COMPAT mode (#417) (6a8ca1a)</li> <li>Stop lima process in postinstall and uninstall (#438) (975c4ee)</li> </ul>"},{"location":"docs/changelog/#build-system-or-external-dependencies_33","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/docker/docker from 23.0.6+incompatible to 24.0.0+incompatible (#406) (25aa324)</li> <li>deps: Bump github.com/docker/docker from 24.0.0+incompatible to 24.0.1+incompatible (#413) (bb1cab2)</li> <li>deps: Bump github.com/docker/docker from 24.0.1+incompatible to 24.0.2+incompatible (#419) (f6f8aeb)</li> <li>deps: Bump github.com/lima-vm/lima from 0.15.1 to 0.16.0 (#428) (6a67f0c)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.9.5 to 2.9.7 (#432) (0a381f1)</li> <li>deps: Bump github.com/onsi/gomega from 1.27.6 to 1.27.7 (#409) (80513c7)</li> <li>deps: Bump github.com/runfinch/common-tests from 0.6.5 to 0.7.0 (#420) (ac18046)</li> <li>deps: Bump github.com/shirou/gopsutil/v3 from 3.23.4 to 3.23.5 (#437) (8635294)</li> <li>deps: Bump github.com/sirupsen/logrus from 1.9.0 to 1.9.1 (#405) (05b6b2e)</li> <li>deps: Bump github.com/sirupsen/logrus from 1.9.1 to 1.9.2 (#408) (0ff477a)</li> <li>deps: Bump github.com/stretchr/testify from 1.8.2 to 1.8.4 (#429) (0f7750e)</li> <li>deps: Bump golang.org/x/tools from 0.9.1 to 0.9.3 (#443) (b192874)</li> <li>deps: Bump k8s.io/apimachinery from 0.27.1 to 0.27.2 (#407) (e6cbd2c)</li> <li>deps: Bump submodules (#402) (06d86b2)</li> <li>deps: Bump submodules (#439) (e9551b5)</li> </ul>"},{"location":"docs/changelog/#061-2023-05-15","title":"0.6.1 (2023-05-15)","text":""},{"location":"docs/changelog/#build-system-or-external-dependencies_34","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/docker/docker from 23.0.3+incompatible to 23.0.5+incompatible (#382) (3e0581c)</li> <li>deps: Bump github.com/docker/docker from 23.0.5+incompatible to 23.0.6+incompatible (#394) (f44bc2e)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.9.2 to 2.9.3 (#390) (7102994)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.9.3 to 2.9.5 (#400) (65458f1)</li> <li>deps: Bump github.com/shirou/gopsutil/v3 from 3.23.3 to 3.23.4 (#389) (76b31c0)</li> <li>deps: Bump golang.org/x/crypto from 0.8.0 to 0.9.0 (#397) (f15c2ee)</li> <li>deps: Bump submodules (#375) (70fe4c3)</li> </ul>"},{"location":"docs/changelog/#060-2023-04-20","title":"0.6.0 (2023-04-20)","text":""},{"location":"docs/changelog/#features_13","title":"Features","text":"<ul> <li>add experimental support for Cosign signing and verification (#296) (84c2634)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_23","title":"Bug Fixes","text":"<ul> <li>always force stop when using Virtualization.framework (#350) (c521f1f)</li> <li>explicitly set permissions for socket_vmnet dependencies (#363) (0801b88)</li> </ul>"},{"location":"docs/changelog/#build-system-or-external-dependencies_35","title":"Build System or External Dependencies","text":"<ul> <li>add local-core Makefile target (#351) (f86c56f)</li> <li>deps: Bump github.com/docker/docker from 23.0.1+incompatible to 23.0.2+incompatible (#320) (ee3df9a)</li> <li>deps: Bump github.com/docker/docker from 23.0.2+incompatible to 23.0.3+incompatible (#343) (6cfbb9f)</li> <li>deps: Bump github.com/lima-vm/lima from 0.15.0 to 0.15.1 (#365) (1d3ee98)</li> <li>deps: Bump github.com/onsi/gomega from 1.27.5 to 1.27.6 (#331) (fe388a3)</li> <li>deps: Bump github.com/runfinch/common-tests from 0.6.4 to 0.6.5 (#357) (dc84864)</li> <li>deps: Bump github.com/runfinch/common-tests version from v0.6.2 to v0.6.3 (#328) (1c44b3e)</li> <li>deps: Bump github.com/spf13/cobra from 1.6.1 to 1.7.0 (#341) (6a77f72)</li> <li>deps: Bump golang.org/x/crypto from 0.7.0 to 0.8.0 (#349) (82b27c9)</li> <li>deps: Bump golang.org/x/tools from 0.7.0 to 0.8.0 (#348) (aaca2c9)</li> <li>deps: Bump k8s.io/apimachinery from 0.26.3 to 0.27.1 (#366) (b93d3a8)</li> <li>deps: Bump lima version (#354) (c721ee6)</li> <li>deps: Bump lima version (#362) (5e03a4d)</li> <li>deps: Bump lima version (#368) (8e4dfe4)</li> <li>deps: Bump submodules (#340) (daed9e2)</li> <li>deps: Bump submodules (#371) (19fc0c5)</li> </ul>"},{"location":"docs/changelog/#050-2023-03-29","title":"0.5.0 (2023-03-29)","text":""},{"location":"docs/changelog/#features_14","title":"Features","text":"<ul> <li>adds support bundles (#210) (cc6be65)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_24","title":"Bug Fixes","text":"<ul> <li>Correctly set and pick up environment variables (#315) (05227ce)</li> <li>print debug logs after newline (#273) (8faa7de)</li> <li>print debug logs when lima disk command fails (#270) (78a3f50)</li> </ul>"},{"location":"docs/changelog/#experimental_1","title":"Experimental","text":"<ul> <li>feat: enable Virtualization.framework and Rosetta (#282) (fd3bf19)</li> </ul>"},{"location":"docs/changelog/#build-system-or-external-dependencies_36","title":"Build System or External Dependencies","text":"<ul> <li>clean up finch-core _output directory in clean target (#290) (4684a95)</li> <li>deps: bump github.com/onsi/ginkgo/v2 from 2.8.4 to 2.9.0 (#265) (7e2d49e)</li> <li>deps: bump github.com/onsi/ginkgo/v2 from 2.9.0 to 2.9.1 (#285) (d741a03)</li> <li>deps: Bump github.com/onsi/gomega from 1.27.3 to 1.27.5 (#312) (e078234)</li> <li>deps: bump github.com/runfinch/common-tests from 0.6.1 to 0.6.2 (#300) (dd626a0)</li> <li>deps: bump github.com/spf13/afero from 1.9.4 to 1.9.5 (#263) (a0e277f)</li> <li>deps: bump golang.org/x/crypto from 0.6.0 to 0.7.0 (#264) (ec1c07f)</li> <li>deps: bump golang.org/x/tools from 0.6.0 to 0.7.0 (#268) (8072e39)</li> <li>deps: bump k8s.io/apimachinery from 0.26.2 to 0.26.3 (#306) (fe392cb)</li> <li>deps: Bump lima version (#302) (0269743)</li> <li>deps: Bump submodules (#281) (d4fd1f6)</li> <li>deps: Bump submodules (#304) (b38af9f)</li> <li>deps: Bump submodules (#307) (1a914ec)</li> <li>deps: Bump submodules (#319) (e671224)</li> <li>deps: Bump submodules (#332) (5923ae2)</li> </ul>"},{"location":"docs/changelog/#041-2023-03-02","title":"0.4.1 (2023-03-02)","text":""},{"location":"docs/changelog/#bug-fixes_25","title":"Bug Fixes","text":"<ul> <li>parse --add-host special ip with equal sign (#229) (fb4b62b)</li> <li>switch from rootless containers to rootful containers (#232) (ae43a07)</li> </ul>"},{"location":"docs/changelog/#build-system-or-external-dependencies_37","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/containerd/containerd from 1.6.14 to 1.6.18 (#223) (7480222)</li> <li>deps: bump github.com/lima-vm/lima from 0.14.2 to 0.15.0 (#247) (007081e)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.8.0 to 2.8.3 (#233) (1185372)</li> <li>deps: bump github.com/onsi/ginkgo/v2 from 2.8.3 to 2.8.4 (#245) (5e64716)</li> <li>deps: Bump github.com/onsi/gomega from 1.26.0 to 1.27.1 (#234) (cd43781)</li> <li>deps: bump github.com/onsi/gomega from 1.27.1 to 1.27.2 (#246) (863c51e)</li> <li>deps: Bump github.com/runfinch/common-tests from 0.5.0 to 0.6.0 (#235) (4a33a2e)</li> <li>deps: Bump github.com/spf13/afero from 1.9.3 to 1.9.4 (#241) (58f26e6)</li> <li>deps: bump github.com/stretchr/testify from 1.8.1 to 1.8.2 (#244) (984af70)</li> <li>deps: Bump golang.org/x/crypto from 0.5.0 to 0.6.0 (#212) (e1a36cf)</li> <li>deps: bump k8s.io/apimachinery from 0.26.1 to 0.26.2 (#251) (4a7268e)</li> <li>update os image versions (#255) (576765b)</li> </ul>"},{"location":"docs/changelog/#040-2023-02-13","title":"0.4.0 (2023-02-13)","text":""},{"location":"docs/changelog/#breaking-changes","title":"\u26a0 BREAKING CHANGES","text":"<ul> <li>persists nerdctl user data (#182)</li> </ul>"},{"location":"docs/changelog/#features_15","title":"Features","text":"<ul> <li>adds a --force flag to vm stop and remove (#178) (d499a7d)</li> <li>Support special IP host-gateway in --add-host flag (#216) (9a38c8e)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_26","title":"Bug Fixes","text":"<ul> <li>correctly handle local environment value pass-through (#158) (e138f10)</li> <li>persists nerdctl user data (#182) (59f372c)</li> <li>persists network user data (#211) (f6baf82)</li> </ul>"},{"location":"docs/changelog/#build-system-or-external-dependencies_38","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/google/go-licenses from 1.5.0 to 1.6.0 (#168) (bb5674c)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.7.0 to 2.7.1 (#193) (7aaa381)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.7.1 to 2.8.0 (#200) (596ed33)</li> <li>deps: Bump github.com/onsi/gomega from 1.25.0 to 1.26.0 (#183) (12661b7)</li> <li>deps: Bump golang.org/x/tools from 0.5.0 to 0.6.0 (#215) (decf250)</li> <li>deps: Bump k8s.io/apimachinery from 0.26.0 to 0.26.1 (#174) (829b0bc)</li> <li>make finch-core a submodule instead of downloading archives (#188) (b08f588)</li> </ul>"},{"location":"docs/changelog/#030-2023-01-18","title":"0.3.0 (2023-01-18)","text":""},{"location":"docs/changelog/#breaking-changes_1","title":"\u26a0 BREAKING CHANGES","text":"<ul> <li>changes persistent disk path to prevent collisions</li> </ul>"},{"location":"docs/changelog/#features_16","title":"Features","text":"<ul> <li>add <code>finch vm status</code> command (#83) (37d74d0)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_27","title":"Bug Fixes","text":"<ul> <li>changes persistent disk path to prevent collisions (3eb66a2)</li> </ul>"},{"location":"docs/changelog/#build-system-or-external-dependencies_39","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/onsi/gomega from 1.24.2 to 1.25.0 (#165) (e4b9e96)</li> <li>deps: Bump github.com/runfinch/common-tests from 0.2.0 to 0.3.0 (#151) (79df04e)</li> <li>deps: Bump github.com/runfinch/common-tests version from v0.3.0 to v0.3.1 (#169) (16157fe)</li> <li>deps: Bump golang.org/x/crypto from 0.4.0 to 0.5.0 (#144) (603419a)</li> </ul>"},{"location":"docs/changelog/#020-2023-01-11","title":"0.2.0 (2023-01-11)","text":""},{"location":"docs/changelog/#features_17","title":"Features","text":"<ul> <li>add <code>finch cp</code> command (#135) (5989361)</li> <li>add config to support additional directories (#128) (0ceb060)</li> <li>Print version with Client and Server (#108) (7f7cdda)</li> <li>saves containerd user data to a persistent disk (#133) (fccb4f3)</li> </ul>"},{"location":"docs/changelog/#bug-fixes_28","title":"Bug Fixes","text":"<ul> <li>Configure Buildkit Namespace as Env Variable (#129) (ffb90be)</li> <li>fix the misleading log when applying invalid config (#119) (b4f74c5)</li> <li>ignore .ssh pub keys (#109) (0b74597)</li> </ul>"},{"location":"docs/changelog/#build-system-or-external-dependencies_40","title":"Build System or External Dependencies","text":"<ul> <li>deps: Bump github.com/lima-vm/lima from 0.13.0 to 0.14.0 (#113) (9b275bc)</li> <li>deps: Bump github.com/lima-vm/lima from 0.14.0 to 0.14.1 (#120) (9dea794)</li> <li>deps: Bump github.com/lima-vm/lima from 0.14.1 to 0.14.2 (#130) (26b7b09)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.5.1 to 2.6.0 (#114) (934521c)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.6.0 to 2.6.1 (#121) (becbc44)</li> <li>deps: Bump github.com/onsi/gomega from 1.24.1 to 1.24.2 (#122) (d8174ff)</li> <li>deps: Bump github.com/runfinch/common-tests from 0.1.1 to 0.2.0 (#125) (1bac92a)</li> <li>deps: Bump golang.org/x/crypto from 0.3.0 to 0.4.0 (#102) (d2778e3)</li> <li>deps: Bump golang.org/x/crypto from 0.4.0 to 0.5.0 (#138) (8d06eec)</li> <li>deps: Bump golang.org/x/tools from 0.3.0 to 0.4.0 (#101) (b3c4df1)</li> <li>deps: Bump golang.org/x/tools from 0.4.0 to 0.5.0 (#139) (89194dc)</li> <li>deps: Bump k8s.io/apimachinery from 0.25.4 to 0.26.0 (#115) (e9084a4)</li> <li>deps: Bump lima version (#141) (35da07d)</li> </ul>"},{"location":"docs/changelog/#011-2022-12-06","title":"0.1.1 (2022-12-06)","text":""},{"location":"docs/changelog/#bug-fixes_29","title":"Bug Fixes","text":"<ul> <li>added the contrib folder to be ignored by CI (#92) (3415f2a)</li> <li>error readable by using the right placeholder (#39) (8e5f38d)</li> <li>Change amd64 runner to 10.15 OS version for amd64 build (#72) (78a646e)</li> </ul>"},{"location":"docs/changelog/#build-system-or-external-dependencies_41","title":"Build System or External Dependencies","text":"<ul> <li>deps: bump finch-core to 0.1.1 (#93) (3f3bce5)</li> <li>deps: Bump github.com/lima-vm/lima from 0.12.0 to 0.13.0 (#40) (520cc7f)</li> <li>deps: Bump github.com/onsi/ginkgo/v2 from 2.5.0 to 2.5.1 (#50) (fa108fd)</li> <li>deps: Bump github.com/runfinch/common-tests version from v0.1.0 to v0.1.1 (#76) (fd22d4a)</li> <li>deps: Bump github.com/spf13/afero from 1.9.2 to 1.9.3 (#43) (bf0ad84)</li> <li>deps: Bump github.com/stretchr/testify from 1.8.0 to 1.8.1 (#44) (31c6d70)</li> <li>deps: Bump github.com/xorcare/pointer from 1.2.1 to 1.2.2 (#42) (8e83137)</li> <li>deps: Bump golang.org/x/crypto from 0.1.0 to 0.3.0 (#49) (89826cf)</li> <li>deps: Bump golang.org/x/tools from 0.2.0 to 0.3.0 (#52) (27c8f24)</li> <li>deps: Bump k8s.io/apimachinery from 0.25.2 to 0.25.4 (#51) (8f15779)</li> <li>deps: Bump lima version (#75) (cfaa4f6)</li> </ul>"},{"location":"docs/configuration-reference/","title":"Finch Configuration","text":"<p>Finch has a configuration file stored at <code>~/.finch/finch.yaml</code> on macOS or <code>%LocalAppData%\\.finch\\finch.yaml</code> on Windows. This configuration file abstracts away the virtual machine, Lima and Hypervisor configuration.</p> <p>Each time the <code>finch.yaml</code> configuration is updated, the virtual machine will need to be restarted for the change to take effect.</p> <pre><code>finch vm stop\nfinch vm start\n</code></pre> <p>Example <code>finch.yaml</code> file:</p> <pre><code>cpus: 3\nmemory: 4GiB\nsnapshotters:\n  - \"overlayfs\"\ncreds_helpers:\n  - \"ecr-login\"\nadditional_directories:\n  - \"/Volumes/mydir\"\nvmType: vz\nrosetta: true\ndockercompat: true\n</code></pre>"},{"location":"docs/configuration-reference/#parameters","title":"Parameters","text":"<p>Many of Finch's configuration options are currently macOS only, and this will be indicated below. On Windows, WSL has its own set of configuration options options available here.</p> <ul> <li> <p><code>cpus</code> (macOS only): The number of logical CPUs to attach to the virtual machine. The   default is determined dynamically based on the resources available using   <code>0.25 * total_cpu_cores</code>, with a minimum value of <code>2</code>.</p> </li> <li> <p><code>memory</code> (macOS only): The amount of memory to attach to the virtual machine. The default   is determined dynamically based on the resources available using    <code>0.25 * total_memory</code>, with a minimum value of <code>2GiB</code>.</p> </li> <li> <p><code>snapshotters</code>: The list of containerd   snapshotters   that will be installed and configured on to the virtual machine. For more   information on lazy loading snapshotters see Lazy   Loading. Supported values: <code>soci</code>,   <code>overlayfs</code>. When this field is omitted Finch will use the <code>overlayfs</code>   snapshotter. By default this field is omitted.</p> </li> <li> <p><code>creds_helpers</code>: The list of credential helpers that will be installed and   configured automatically on <code>finch vm init</code> or <code>finch vm start</code>. For more   information see Registry   Authentication. Supported values:   <code>ecr-login</code>. By default this field is omitted.</p> </li> <li> <p><code>additional_directories</code> (macOS only): By default Finch will mount the users home directory   into the virtual machine. To mount additional directories from macOS into the   virtual machine, specify them here. See disk   management for more details.   Default is <code>[]</code></p> </li> <li> <p><code>vmType</code>: The hypervisor to use for the virtual machine.</p> <ul> <li>macOS<ul> <li>QEMU (<code>qemu</code>) or Apple Virtualization   Framework (<code>vz</code>).   Apple Virtualization Framework can only be used on macOS 13 or later. Default   is <code>vz</code></li> </ul> </li> <li>Windows<ul> <li>The only supported vmType for Windows is <code>wsl2</code></li> </ul> </li> </ul> </li> <li> <p><code>rosetta</code>: (macOS only): The emulation layer to use when running container images or   processes on an architecture not native to the machine. If value is set to   <code>false</code>, the emulation is provided by QEMU. If value is set to <code>true</code>,   Apple's   Rosetta   framework is used. Rosetta can only be used if <code>vmType: vz</code>. When <code>vmType: vz</code>   is set, without specifying <code>rosetta</code>, <code>rosetta</code> will default to <code>true</code>.   Otherwise, the default is <code>false</code></p> </li> <li> <p><code>dockercompat</code>: activates finch functionality to accept docker-compatible arguments and return docker-like responses for a limited set of docker commands.   Specifically, Finch will convert the Docker invocation into compatible nerdctl commands and arguments when possible.   This option is required for running DevContainers on Finch.</p> </li> </ul>"},{"location":"docs/cli-reference/finch_build/","title":"finch build","text":"<p>Build an image from a Dockerfile. Needs buildkitd to be running. If Dockerfile is not present and -f is not specified, it will look for Containerfile and build with it.</p> <pre><code>finch build [flags] PATH\n</code></pre>"},{"location":"docs/cli-reference/finch_build/#options","title":"Options","text":"<pre><code>      --build-arg stringArray    Set build-time variables\n      --buildkit-host string     BuildKit address [$BUILDKIT_HOST] (default \"unix:///run/buildkit/buildkitd.sock\")\n      --cache-from stringArray   External cache sources (eg. user/app:cache, type=local,src=path/to/dir)\n      --cache-to stringArray     Cache export destinations (eg. user/app:cache, type=local,dest=path/to/dir)\n  -f, --file string              Name of the Dockerfile\n  -h, --help                     help for build\n      --iidfile string           Write the image ID to the file\n      --label stringArray        Set metadata for an image\n      --network string           Set type of network for build (format:network=default|none|host) (default \"default\")\n      --no-cache                 Do not use cache when building the image\n  -o, --output string            Output destination (format: type=local,dest=path)\n      --platform strings         Set target platform for build (e.g., \"amd64\", \"arm64\")\n      --progress string          Set type of progress output (auto, plain, tty). Use plain to show container output (default \"auto\")\n  -q, --quiet                    Suppress the build output and print image ID on success\n      --rm                       Remove intermediate containers after a successful build (default true)\n      --secret stringArray       Secret file to expose to the build: id=mysecret,src=/local/secret\n      --ssh stringArray          SSH agent socket or keys to expose to the build (format: default|&lt;id&gt;[=&lt;socket&gt;|&lt;key&gt;[,&lt;key&gt;]])\n  -t, --tag stringArray          Name and optionally a tag in the 'name:tag' format\n      --target string            Set the target build stage to build\n</code></pre>"},{"location":"docs/cli-reference/finch_builder/","title":"finch builder","text":"<p>Manage builds</p> <pre><code>finch builder [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_builder/#commands","title":"Commands","text":"<pre><code>  build  Build an image from a Dockerfile. Needs buildkitd to be running.\n  debug  Debug Dockerfile\n  prune  Clean up BuildKit build cache\n</code></pre>"},{"location":"docs/cli-reference/finch_builder/#options","title":"Options","text":"<pre><code>  -h, --help   help for builder\n</code></pre>"},{"location":"docs/cli-reference/finch_commit/","title":"finch commit","text":"<p>Create a new image from a container's changes</p> <pre><code>finch commit [flags] CONTAINER REPOSITORY[:TAG]\n</code></pre>"},{"location":"docs/cli-reference/finch_commit/#options","title":"Options","text":"<pre><code>  -a, --author string        Author (e.g., \"finch contributor &lt;finch-dev@example.com&gt;\")\n  -c, --change stringArray   Apply Dockerfile instruction to the created image (supported directives: [CMD, ENTRYPOINT])\n  -h, --help                 help for commit\n  -m, --message string       Commit message\n  -p, --pause                Pause container during commit (default true)\n</code></pre>"},{"location":"docs/cli-reference/finch_completion_bash/","title":"finch completion bash","text":"<p>Generate the autocompletion script for the bash shell.</p> <p>This script depends on the 'bash-completion' package. If it is not installed already, you can install it via your OS's package manager.</p> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(finch completion bash)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"docs/cli-reference/finch_completion_bash/#_1","title":"finch completion bash","text":"<pre><code>  finch completion bash\n</code></pre>"},{"location":"docs/cli-reference/finch_completion_bash/#options","title":"Options","text":"<pre><code>  -h, --help              help for bash\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"docs/cli-reference/finch_completion_fish/","title":"finch completion fish","text":"<p>Generate the autocompletion script for the fish shell.</p> <p>To load completions in your current shell session:</p> <pre><code>finch completion fish | source\n</code></pre> <p>To load completions for every new session, execute once:</p> <pre><code>finch completion fish &gt; ~/.config/fish/completions/finch.fish\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>  finch completion fish [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_completion_fish/#options","title":"Options","text":"<pre><code>  -h, --help              help for fish\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"docs/cli-reference/finch_completion_powershell/","title":"finch completion powershell","text":"<p>Generate the autocompletion script for powershell.</p> <p>To load completions in your current shell session:</p> <pre><code>finch completion powershell | Out-String | Invoke-Expression\n</code></pre> <p>To load completions for every new session, add the output of the above command to your powershell profile.</p> <pre><code>  finch completion powershell [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_completion_powershell/#options","title":"Options","text":"<pre><code>  -h, --help              help for powershell\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"docs/cli-reference/finch_completion_zsh/","title":"finch completion zsh","text":"<p>Generate the autocompletion script for the zsh shell.</p> <p>If shell completion is not already enabled in your environment you will need to enable it.  You can execute the following once:</p> <pre><code>echo \"autoload -U compinit; compinit\" &gt;&gt; ~/.zshrc\n</code></pre> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(finch completion zsh)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"docs/cli-reference/finch_completion_zsh/#_1","title":"finch completion zsh","text":"<pre><code>  finch completion zsh [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_completion_zsh/#options","title":"Options","text":"<pre><code>  -h, --help              help for zsh\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"docs/cli-reference/finch_compose/","title":"finch compose","text":"<p>Compose</p> <pre><code>finch compose [flags] COMMAND\n</code></pre>"},{"location":"docs/cli-reference/finch_compose/#commands","title":"Commands","text":"<pre><code>  build    Build or rebuild services\n  config   Validate and view the Compose file\n  cp       Copy files/folders between a service container and the local filesystem\n  create   Creates containers for one or more services\n  down     Remove containers and associated resources\n  exec     Execute a command in a running container of the service\n  images   List images used by created containers in services\n  kill     Force stop service containers\n  logs     Show logs of running containers\n  pause    Pause all processes within containers of service(s). They can be unpaused with finch compose unpause\n  port     Print the public port for a port binding\n  ps       List containers of services\n  pull     Pull service images\n  push     Push service images\n  restart  Restart containers of given (or all) services\n  rm       Remove stopped service containers\n  run      Run a one-off command on a service\n  start    Start existing containers for service(s)\n  stop     Stop running containers without removing them.\n  top      Display the running processes of service containers\n  unpause  Unpause all processes within containers of service(s).\n  up       Create and start containers\n  version  Show the Compose version information\n</code></pre>"},{"location":"docs/cli-reference/finch_compose/#options","title":"Options","text":"<pre><code>      --env-file string            Specify an alternate environment file\n  -f, --f stringArray              Alias of --file\n      --file stringArray           Specify an alternate compose file\n  -h, --help                       help for compose\n      --ipfs-address string        multiaddr of IPFS API (default uses $IPFS_PATH env variable if defined or local directory ~/.ipfs)\n      --profile stringArray        Specify a profile to enable\n      --project-directory string   Specify an alternate working directory\n  -p, --project-name string        Specify an alternate project name\n</code></pre>"},{"location":"docs/cli-reference/finch_container/","title":"finch container","text":"<p>Manage containers</p> <pre><code>finch container [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_container/#commands","title":"Commands","text":"<pre><code>  attach   Attach stdin, stdout, and stderr to a running container.\n  commit   Create a new image from a container's changes\n  cp       Copy files/folders between a running container and the local filesystem.\n  create   Create a new container. Optionally specify \"ipfs://\" or \"ipns://\" scheme to pull image from IPFS.\n  exec     Run a command in a running container\n  inspect  Display detailed information on one or more containers.\n  kill     Kill one or more running containers\n  logs     Fetch the logs of a container. Expected to be used with 'finch run -d'.\n  ls       List containers\n  pause    Pause all processes within one or more containers\n  port     List port mappings or a specific mapping for the container\n  prune    Remove all stopped containers\n  rename   rename a container\n  restart  Restart one or more running containers\n  rm       Remove one or more containers\n  run      Run a command in a new container. Optionally specify \"ipfs://\" or \"ipns://\" scheme to pull image from IPFS.\n  start    Start one or more running containers\n  stats    Display a live stream of container(s) resource usage statistics.\n  stop     Stop one or more running containers\n  unpause  Unpause all processes within one or more containers\n  update   Update one or more running containers\n  wait     Block until one or more containers stop, then print their exit codes.\n</code></pre>"},{"location":"docs/cli-reference/finch_container/#options","title":"Options","text":"<pre><code>  -h, --help   help for container\n</code></pre>"},{"location":"docs/cli-reference/finch_cp/","title":"finch cp","text":"<p>Copy files/folders between a running container and the local filesystem. This command requires 'tar' to be installed on the host (not in the container). Using GNU tar is recommended. The path of the 'tar' binary can be specified with an environment variable '$TAR'.</p> <pre><code>finch cp [flags] CONTAINER:SRC_PATH DEST_PATH|-\n  finch cp [flags] SRC_PATH|- CONTAINER:DEST_PATH\n</code></pre>"},{"location":"docs/cli-reference/finch_cp/#options","title":"Options","text":"<pre><code>  -L, --follow-link   Always follow symbolic link in SRC_PATH.\n  -h, --help          help for cp\n</code></pre>"},{"location":"docs/cli-reference/finch_create/","title":"finch create","text":"<p>Create a new container. Optionally specify \"ipfs://\" or \"ipns://\" scheme to pull image from IPFS.</p> <pre><code>finch create [flags] IMAGE [COMMAND] [ARG...]\n</code></pre>"},{"location":"docs/cli-reference/finch_create/#options","title":"Options","text":"<pre><code>      --add-host strings                               Add a custom host-to-IP mapping (host:ip)\n      --blkio-weight uint16                            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)\n      --cap-add strings                                Add Linux capabilities\n      --cap-drop strings                               Drop Linux capabilities\n      --cgroup-conf strings                            Configure cgroup v2 (key=value)\n      --cgroup-parent string                           Optional parent cgroup for the container\n      --cgroupns string                                Cgroup namespace to use, the default depends on the cgroup version (\"host\"|\"private\") (default \"private\")\n      --cidfile string                                 Write the container ID to the file\n      --cosign-certificate-identity string             The identity expected in a valid Fulcio certificate for --verify=cosign. Valid values include email address, DNS names, IP addresses, and URIs. Either --cosign-certificate-identity or --cosign-certificate-identity-regexp must be set for keyless flows\n      --cosign-certificate-identity-regexp string      A regular expression alternative to --cosign-certificate-identity for --verify=cosign. Accepts the Go regular expression syntax described at https://golang.org/s/re2syntax. Either --cosign-certificate-identity or --cosign-certificate-identity-regexp must be set for keyless flows\n      --cosign-certificate-oidc-issuer string          The OIDC issuer expected in a valid Fulcio certificate for --verify=cosign, e.g. https://token.actions.githubusercontent.com or https://oauth2.sigstore.dev/auth. Either --cosign-certificate-oidc-issuer or --cosign-certificate-oidc-issuer-regexp must be set for keyless flows\n      --cosign-certificate-oidc-issuer-regexp string   A regular expression alternative to --certificate-oidc-issuer for --verify=cosign. Accepts the Go regular expression syntax described at https://golang.org/s/re2syntax. Either --cosign-certificate-oidc-issuer or --cosign-certificate-oidc-issuer-regexp must be set for keyless flows\n      --cosign-key string                              Path to the public key file, KMS, URI or Kubernetes Secret for --verify=cosign\n      --cpu-period uint                                Limit CPU CFS (Completely Fair Scheduler) period\n      --cpu-quota int                                  Limit CPU CFS (Completely Fair Scheduler) quota (default -1)\n      --cpu-shares uint                                CPU shares (relative weight)\n      --cpus float                                     Number of CPUs\n      --cpuset-cpus string                             CPUs in which to allow execution (0-3, 0,1)\n      --cpuset-mems string                             MEMs in which to allow execution (0-3, 0,1)\n      --detach-keys string                             Override the default detach keys (default \"ctrl-p,ctrl-q\")\n      --device strings                                 Add a host device to the container\n      --dns strings                                    Set custom DNS servers\n      --dns-opt strings                                Set DNS options\n      --dns-option strings                             Set DNS options\n      --dns-search strings                             Set custom DNS search domains\n      --entrypoint stringArray                         Overwrite the default ENTRYPOINT of the image\n  -e, --env stringArray                                Set environment variables\n      --env-file strings                               Set environment variables from file\n      --gpus stringArray                               GPU devices to add to the container ('all' to pass all GPUs)\n      --group-add strings                              Add additional groups to join\n      --help                                           show help\n  -h, --hostname string                                Container host name\n      --init                                           Run an init process inside the container, Default to use tini\n      --init-binary string                             The custom binary to use as the init process (default \"tini\")\n  -i, --interactive                                    Keep STDIN open even if not attached\n      --ip string                                      IPv4 address to assign to the container\n      --ipc string                                     IPC namespace to use (\"host\"|\"private\")\n      --ipfs-address string                            multiaddr of IPFS API (default uses $IPFS_PATH env variable if defined or local directory ~/.ipfs)\n      --isolation string                               Specify isolation technology for container. On Linux the only valid value is default. Windows options are host, process and hyperv with process isolation as the default (default \"default\")\n      --kernel-memory string                           Kernel memory limit (deprecated)\n  -l, --label stringArray                              Set metadata on container\n      --label-file strings                             Set metadata on container from file\n      --log-driver string                              Logging driver for the container. Default is json-file. It also supports logURI (eg: --log-driver binary://&lt;path&gt;) (default \"json-file\")\n      --log-opt stringArray                            Log driver options\n      --mac-address string                             MAC address to assign to the container\n  -m, --memory string                                  Memory limit\n      --memory-reservation string                      Memory soft limit\n      --memory-swap string                             Swap limit equal to memory plus swap: '-1' to enable unlimited swap\n      --memory-swappiness int                          Tune container memory swappiness (0 to 100) (default -1) (default -1)\n      --mount stringArray                              Attach a filesystem mount to the container\n      --name string                                    Assign a name to the container\n      --net strings                                    Connect a container to a network (\"bridge\"|\"host\"|\"none\"|&lt;CNI&gt;) (default [bridge])\n      --network strings                                Connect a container to a network (\"bridge\"|\"host\"|\"none\"|\"container:&lt;container&gt;\"|&lt;CNI&gt;) (default [bridge])\n      --oom-kill-disable                               Disable OOM Killer\n      --oom-score-adj int                              Tune container\u2019s OOM preferences (-1000 to 1000, rootless: 100 to 1000)\n      --pid string                                     PID namespace to use\n      --pidfile string                                 file path to write the task's pid\n      --pids-limit int                                 Tune container pids limit (set -1 for unlimited) (default -1)\n      --platform string                                Set platform (e.g. \"amd64\", \"arm64\")\n      --privileged                                     Give extended privileges to this container\n  -p, --publish strings                                Publish a container's port(s) to the host\n      --pull string                                    Pull image before running (\"always\"|\"missing\"|\"never\") (default \"missing\")\n      --rdt-class string                               Name of the RDT class (or CLOS) to associate the container with\n      --read-only                                      Mount the container's root filesystem as read only\n      --restart string                                 Restart policy to apply when a container exits (implemented values: \"no\"|\"always|on-failure:n|unless-stopped\") (default \"no\")\n      --rm                                             Automatically remove the container when it exits\n      --rootfs                                         The first argument is not an image but the rootfs to the exploded container\n      --runtime string                                 Runtime to use for this container, e.g. \"crun\", or \"io.containerd.runsc.v1\" (default \"io.containerd.runc.v2\")\n      --security-opt stringArray                       Security options\n      --shm-size string                                Size of /dev/shm\n      --stop-signal string                             Signal to stop a container (default \"SIGTERM\")\n      --stop-timeout int                               Timeout (in seconds) to stop a container\n      --sysctl stringArray                             Sysctl options\n      --tmpfs stringArray                              Mount a tmpfs directory\n  -t, --tty                                            Allocate a pseudo-TTY\n      --ulimit strings                                 Ulimit options\n      --umask string                                   Set the umask inside the container. Defaults to 0022\n  -u, --user string                                    Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])\n      --uts string                                     UTS namespace to use\n      --verify string                                  Verify the image (none|cosign|notation) (default \"none\")\n  -v, --volume stringArray                             Bind mount a volume\n      --volumes-from stringArray                       Mount volumes from the specified container(s)\n  -w, --workdir string                                 Working directory inside the container\n</code></pre>"},{"location":"docs/cli-reference/finch_events/","title":"finch events","text":"<p>Get real time events from the server</p> <pre><code>finch events [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_events/#options","title":"Options","text":"<pre><code>      --format string   Format the output using the given Go template, e.g, '{{json .}}'\n  -h, --help            help for events\n</code></pre>"},{"location":"docs/cli-reference/finch_exec/","title":"finch exec","text":"<p>Run a command in a running container</p> <pre><code>finch exec [flags] CONTAINER COMMAND [ARG...]\n</code></pre>"},{"location":"docs/cli-reference/finch_exec/#options","title":"Options","text":"<pre><code>  -d, --detach             Detached mode: run command in the background\n  -e, --env stringArray    Set environment variables\n      --env-file strings   Set environment variables from file\n  -h, --help               help for exec\n  -i, --interactive        Keep STDIN open even if not attached\n      --privileged         Give extended privileges to the command\n  -t, --tty                Allocate a pseudo-TTY\n  -u, --user string        Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])\n  -w, --workdir string     Working directory inside the container\n</code></pre>"},{"location":"docs/cli-reference/finch_help/","title":"finch help","text":"<p>Help provides help for any command in the application. Simply type finch help [path to command] for full details.</p> <pre><code>  finch help [command] [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_help/#options","title":"Options","text":"<pre><code>  -h, --help   help for help\n</code></pre>"},{"location":"docs/cli-reference/finch_history/","title":"finch history","text":"<p>Show the history of an image</p> <pre><code>finch history [flags] IMAGE\n</code></pre>"},{"location":"docs/cli-reference/finch_history/#options","title":"Options","text":"<pre><code>  -f, --format string   Format the output using the given Go template, e.g, '{{json .}}'\n  -h, --help            help for history\n      --no-trunc        Don't truncate output\n  -q, --quiet           Only show numeric IDs\n</code></pre>"},{"location":"docs/cli-reference/finch_image/","title":"finch image","text":"<p>Manage images</p> <pre><code>finch image [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_image/#commands","title":"Commands","text":"<pre><code>  build    Build an image from a Dockerfile. Needs buildkitd to be running.\n  convert  convert an image\n  decrypt  decrypt an image\n  encrypt  encrypt image layers\n  history  Show the history of an image\n  inspect  Display detailed information on one or more images.\n  load     Load an image from a tar archive or STDIN\n  ls       List images\n  prune    Remove unused images\n  pull     Pull an image from a registry. Optionally specify \"ipfs://\" or \"ipns://\" scheme to pull image from IPFS.\n  push     Push an image or a repository to a registry. Optionally specify \"ipfs://\" or \"ipns://\" scheme to push image to IPFS.\n  rm       Remove one or more images\n  save     Save one or more images to a tar archive (streamed to STDOUT by default)\n  tag      Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\n</code></pre>"},{"location":"docs/cli-reference/finch_image/#options","title":"Options","text":"<pre><code>  -h, --help   help for image\n</code></pre>"},{"location":"docs/cli-reference/finch_images/","title":"finch images","text":"<p>List images</p>"},{"location":"docs/cli-reference/finch_images/#properties","title":"Properties","text":"<ul> <li>REPOSITORY: Repository</li> <li>TAG:        Tag</li> <li>NAME:       Name of the image, --names for skip parsing as repository and tag.</li> <li>IMAGE ID:   OCI Digest. Usually different from Docker image ID. Shared for multi-platform images.</li> <li>CREATED:    Created time</li> <li>PLATFORM:   Platform</li> <li>SIZE:       Size of the unpacked snapshots</li> <li>BLOB SIZE:  Size of the blobs (such as layer tarballs) in the content store</li> </ul> <pre><code>finch images [flags] [REPOSITORY[:TAG]]\n</code></pre>"},{"location":"docs/cli-reference/finch_images/#options","title":"Options","text":"<pre><code>  -a, --all              (unimplemented yet, always true) (default true)\n      --digests          Show digests (compatible with Docker, unlike ID)\n  -f, --filter strings   Filter output based on conditions provided\n      --format string    Format the output using the given Go template, e.g, '{{json .}}', 'wide'\n  -h, --help             help for images\n      --names            Show image names\n      --no-trunc         Don't truncate output\n  -q, --quiet            Only show numeric IDs\n</code></pre>"},{"location":"docs/cli-reference/finch_info/","title":"finch info","text":"<p>Display system-wide information</p> <pre><code>finch info [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_info/#options","title":"Options","text":"<pre><code>  -f, --format string   Format the output using the given Go template, e.g, '{{json .}}'\n  -h, --help            help for info\n      --mode string     Information mode, \"dockercompat\" for Docker-compatible output, \"native\" for containerd-native output (default \"dockercompat\")\n</code></pre>"},{"location":"docs/cli-reference/finch_inspect/","title":"finch inspect","text":"<p>Return low-level information on objects.</p> <pre><code>finch inspect [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_inspect/#options","title":"Options","text":"<pre><code>  -f, --format string   Format the output using the given Go template, e.g, '{{json .}}'\n  -h, --help            help for inspect\n      --mode string     Inspect mode, \"dockercompat\" for Docker-compatible output, \"native\" for containerd-native output (default \"dockercompat\")\n      --type string     Return JSON for specified type\n</code></pre>"},{"location":"docs/cli-reference/finch_kill/","title":"finch kill","text":"<p>Kill one or more running containers</p> <pre><code>finch kill [flags] CONTAINER [CONTAINER, ...]\n</code></pre>"},{"location":"docs/cli-reference/finch_kill/#options","title":"Options","text":"<pre><code>  -h, --help            help for kill\n  -s, --signal string   Signal to send to the container (default \"KILL\")\n</code></pre>"},{"location":"docs/cli-reference/finch_load/","title":"finch load","text":"<p>Supports both Docker Image Spec v1.2 and OCI Image Spec v1.0.</p> <pre><code>finch load [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_load/#options","title":"Options","text":"<pre><code>      --all-platforms      Import content for all platforms\n  -h, --help               help for load\n  -i, --input string       Read from tar archive file, instead of STDIN\n      --platform strings   Import content for a specific platform\n</code></pre>"},{"location":"docs/cli-reference/finch_login/","title":"finch login","text":"<p>Log in to a container registry</p> <pre><code>finch login [flags] [SERVER]\n</code></pre>"},{"location":"docs/cli-reference/finch_login/#options","title":"Options","text":"<pre><code>  -h, --help              help for login\n  -p, --password string   Password\n      --password-stdin    Take the password from stdin\n  -u, --username string   Username\n</code></pre>"},{"location":"docs/cli-reference/finch_logout/","title":"finch logout","text":"<p>Log out from a container registry</p> <pre><code>finch logout [flags] [SERVER]\n</code></pre>"},{"location":"docs/cli-reference/finch_logout/#options","title":"Options","text":"<pre><code>  -h, --help   help for logout\n</code></pre>"},{"location":"docs/cli-reference/finch_logs/","title":"finch logs","text":"<p>Fetch the logs of a container.</p> <p>The following containers are supported: - Containers created with 'finch run -d'. The log is currently empty for containers created without '-d'. - Containers created with 'finch compose'. - Containers created with Kubernetes (EXPERIMENTAL).</p> <pre><code>finch logs [flags] CONTAINER\n</code></pre>"},{"location":"docs/cli-reference/finch_logs/#options","title":"Options","text":"<pre><code>  -f, --follow         Follow log output\n  -h, --help           help for logs\n      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)\n  -n, --tail string    Number of lines to show from the end of the logs (default \"all\")\n  -t, --timestamps     Show timestamps\n      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)\n</code></pre>"},{"location":"docs/cli-reference/finch_logs/#note","title":"Note","text":"<p>When running containers in detached mode (<code>run -d</code>) or in interactive mode (<code>run -it</code>) logs are persisted to a JSON log file by default, these can be accessed via the <code>finch logs</code> command.</p> <p>When starting containers in attached mode (<code>start -a</code>), logs are directed to stdout and stderr of the terminal session. In this scenario:</p> <ul> <li>Logs are not persisted to a file by default.</li> <li>Users are responsible for log persistence if required.</li> </ul>"},{"location":"docs/cli-reference/finch_logs/#important-considerations","title":"Important Considerations","text":"<ul> <li>The default logging behavior can be overridden using logging options provided by finch.</li> <li>For long-running applications or when log persistence is crucial, consider using detached mode or implementing a custom logging solution when using attached mode.</li> </ul>"},{"location":"docs/cli-reference/finch_network/","title":"finch network","text":"<p>Manage networks</p> <pre><code>finch network [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_network/#commands","title":"Commands","text":"<pre><code>  create   Create a network\n  inspect  Display detailed information on one or more networks\n  ls       List networks\n  prune    Remove all unused networks\n  rm       Remove one or more networks\n</code></pre>"},{"location":"docs/cli-reference/finch_network/#options","title":"Options","text":"<pre><code>  -h, --help   help for network\n</code></pre>"},{"location":"docs/cli-reference/finch_pause/","title":"finch pause","text":"<p>Pause all processes within one or more containers</p> <pre><code>finch pause [flags] CONTAINER [CONTAINER, ...]\n</code></pre>"},{"location":"docs/cli-reference/finch_pause/#options","title":"Options","text":"<pre><code>  -h, --help   help for pause\n</code></pre>"},{"location":"docs/cli-reference/finch_port/","title":"finch port","text":"<p>List port mappings or a specific mapping for the container</p> <pre><code>finch port [flags] CONTAINER [PRIVATE_PORT[/PROTO]]\n</code></pre>"},{"location":"docs/cli-reference/finch_port/#options","title":"Options","text":"<pre><code>  -h, --help   help for port\n</code></pre>"},{"location":"docs/cli-reference/finch_ps/","title":"finch ps","text":"<p>List containers</p> <pre><code>finch ps [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_ps/#options","title":"Options","text":"<pre><code>  -a, --all              Show all containers (default shows just running)\n  -f, --filter strings   Filter matches containers based on given conditions\n      --format string    Format the output using the given Go template, e.g, '{{json .}}', 'wide'\n  -h, --help             help for ps\n  -n, --last int         Show n last created containers (includes all states) (default -1)\n  -l, --latest           Show the latest created container (includes all states)\n      --no-trunc         Don't truncate output\n  -q, --quiet            Only display container IDs\n  -s, --size             Display total file sizes\n</code></pre>"},{"location":"docs/cli-reference/finch_pull/","title":"finch pull","text":"<p>Pull an image from a registry. Optionally specify \"ipfs://\" or \"ipns://\" scheme to pull image from IPFS.</p> <pre><code>finch pull [flags] NAME[:TAG]\n</code></pre>"},{"location":"docs/cli-reference/finch_pull/#options","title":"Options","text":"<pre><code>      --all-platforms                                  Pull content for all platforms\n      --cosign-certificate-identity string             The identity expected in a valid Fulcio certificate for --verify=cosign. Valid values include email address, DNS names, IP addresses, and URIs. Either --cosign-certificate-identity or --cosign-certificate-identity-regexp must be set for keyless flows\n      --cosign-certificate-identity-regexp string      A regular expression alternative to --cosign-certificate-identity for --verify=cosign. Accepts the Go regular expression syntax described at https://golang.org/s/re2syntax. Either --cosign-certificate-identity or --cosign-certificate-identity-regexp must be set for keyless flows\n      --cosign-certificate-oidc-issuer string          The OIDC issuer expected in a valid Fulcio certificate for --verify=cosign,, e.g. https://token.actions.githubusercontent.com or https://oauth2.sigstore.dev/auth. Either --cosign-certificate-oidc-issuer or --cosign-certificate-oidc-issuer-regexp must be set for keyless flows\n      --cosign-certificate-oidc-issuer-regexp string   A regular expression alternative to --certificate-oidc-issuer for --verify=cosign,. Accepts the Go regular expression syntax described at https://golang.org/s/re2syntax. Either --cosign-certificate-oidc-issuer or --cosign-certificate-oidc-issuer-regexp must be set for keyless flows\n      --cosign-key string                              Path to the public key file, KMS, URI or Kubernetes Secret for --verify=cosign\n  -h, --help                                           help for pull\n      --ipfs-address string                            multiaddr of IPFS API (default uses $IPFS_PATH env variable if defined or local directory ~/.ipfs)\n      --platform strings                               Pull content for a specific platform\n  -q, --quiet                                          Suppress verbose output\n      --unpack string                                  Unpack the image for the current single platform (auto/true/false) (default \"auto\")\n      --verify string                                  Verify the image (none|cosign|notation) (default \"none\")\n</code></pre>"},{"location":"docs/cli-reference/finch_push/","title":"finch push","text":"<p>Push an image or a repository to a registry. Optionally specify \"ipfs://\" or \"ipns://\" scheme to push image to IPFS.</p> <pre><code>finch push [flags] NAME[:TAG]\n</code></pre>"},{"location":"docs/cli-reference/finch_push/#options","title":"Options","text":"<pre><code>      --all-platforms                      Push content for all platforms\n      --allow-nondistributable-artifacts   Allow pushing images with non-distributable blobs\n      --cosign-key string                  Path to the private key file, KMS URI or Kubernetes Secret for --sign=cosign\n      --estargz                            Convert the image into eStargz\n  -h, --help                               help for push\n      --ipfs-address string                multiaddr of IPFS API (default uses $IPFS_PATH env variable if defined or local directory ~/.ipfs)\n      --ipfs-ensure-image                  Ensure the entire contents of the image is locally available before push (default true)\n      --notation-key-name string           Signing key name for a key previously added to notation's key list for --sign=notation\n      --platform strings                   Push content for a specific platform\n  -q, --quiet                              Suppress verbose output\n      --sign string                        Sign the image (none|cosign|notation (default \"none\")\n      --soci-min-layer-size int            Minimum layer size to build zTOC for. Smaller layers won't have zTOC and not lazy pulled. Default is 10 MiB. (default -1)\n      --soci-span-size int                 Span size that soci index uses to segment layer data. Default is 4 MiB. (default -1)\n</code></pre>"},{"location":"docs/cli-reference/finch_restart/","title":"finch restart","text":"<p>Restart one or more running containers</p> <pre><code>finch restart [flags] CONTAINER [CONTAINER, ...]\n</code></pre>"},{"location":"docs/cli-reference/finch_restart/#options","title":"Options","text":"<pre><code>  -h, --help        help for restart\n  -t, --time uint   Seconds to wait for stop before killing it (default 10)\n</code></pre>"},{"location":"docs/cli-reference/finch_rm/","title":"finch rm","text":"<p>Remove one or more containers</p> <pre><code>finch rm [flags] CONTAINER [CONTAINER, ...]\n</code></pre>"},{"location":"docs/cli-reference/finch_rm/#options","title":"Options","text":"<pre><code>  -f, --force     Force the removal of a running|paused|unknown container (uses SIGKILL)\n  -h, --help      help for rm\n  -v, --volumes   Remove volumes associated with the container\n</code></pre>"},{"location":"docs/cli-reference/finch_rmi/","title":"finch rmi","text":"<p>Remove one or more images</p> <pre><code>finch rmi [flags] IMAGE [IMAGE, ...]\n</code></pre>"},{"location":"docs/cli-reference/finch_rmi/#options","title":"Options","text":"<pre><code>      --async   Asynchronous mode\n  -f, --force   Force removal of the image\n  -h, --help    help for rmi\n</code></pre>"},{"location":"docs/cli-reference/finch_run/","title":"finch run","text":"<p>Run a command in a new container. Optionally specify \"ipfs://\" or \"ipns://\" scheme to pull image from IPFS.</p> <pre><code>finch run [flags] IMAGE [COMMAND] [ARG...]\n</code></pre>"},{"location":"docs/cli-reference/finch_run/#options","title":"Options","text":"<pre><code>      --add-host strings                               Add a custom host-to-IP mapping (host:ip)\n      --blkio-weight uint16                            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)\n      --cap-add strings                                Add Linux capabilities\n      --cap-drop strings                               Drop Linux capabilities\n      --cgroup-conf strings                            Configure cgroup v2 (key=value)\n      --cgroup-parent string                           Optional parent cgroup for the container\n      --cgroupns string                                Cgroup namespace to use, the default depends on the cgroup version (\"host\"|\"private\") (default \"private\")\n      --cidfile string                                 Write the container ID to the file\n      --cosign-certificate-identity string             The identity expected in a valid Fulcio certificate for --verify=cosign. Valid values include email address, DNS names, IP addresses, and URIs. Either --cosign-certificate-identity or --cosign-certificate-identity-regexp must be set for keyless flows\n      --cosign-certificate-identity-regexp string      A regular expression alternative to --cosign-certificate-identity for --verify=cosign. Accepts the Go regular expression syntax described at https://golang.org/s/re2syntax. Either --cosign-certificate-identity or --cosign-certificate-identity-regexp must be set for keyless flows\n      --cosign-certificate-oidc-issuer string          The OIDC issuer expected in a valid Fulcio certificate for --verify=cosign, e.g. https://token.actions.githubusercontent.com or https://oauth2.sigstore.dev/auth. Either --cosign-certificate-oidc-issuer or --cosign-certificate-oidc-issuer-regexp must be set for keyless flows\n      --cosign-certificate-oidc-issuer-regexp string   A regular expression alternative to --certificate-oidc-issuer for --verify=cosign. Accepts the Go regular expression syntax described at https://golang.org/s/re2syntax. Either --cosign-certificate-oidc-issuer or --cosign-certificate-oidc-issuer-regexp must be set for keyless flows\n      --cosign-key string                              Path to the public key file, KMS, URI or Kubernetes Secret for --verify=cosign\n      --cpu-period uint                                Limit CPU CFS (Completely Fair Scheduler) period\n      --cpu-quota int                                  Limit CPU CFS (Completely Fair Scheduler) quota (default -1)\n      --cpu-shares uint                                CPU shares (relative weight)\n      --cpus float                                     Number of CPUs\n      --cpuset-cpus string                             CPUs in which to allow execution (0-3, 0,1)\n      --cpuset-mems string                             MEMs in which to allow execution (0-3, 0,1)\n  -d, --detach                                         Run container in background and print container ID\n      --detach-keys string                             Override the default detach keys (default \"ctrl-p,ctrl-q\")\n      --device strings                                 Add a host device to the container\n      --dns strings                                    Set custom DNS servers\n      --dns-opt strings                                Set DNS options\n      --dns-option strings                             Set DNS options\n      --dns-search strings                             Set custom DNS search domains\n      --entrypoint stringArray                         Overwrite the default ENTRYPOINT of the image\n  -e, --env stringArray                                Set environment variables\n      --env-file strings                               Set environment variables from file\n      --gpus stringArray                               GPU devices to add to the container ('all' to pass all GPUs)\n      --group-add strings                              Add additional groups to join\n      --help                                           show help\n  -h, --hostname string                                Container host name\n      --init                                           Run an init process inside the container, Default to use tini\n      --init-binary string                             The custom binary to use as the init process (default \"tini\")\n  -i, --interactive                                    Keep STDIN open even if not attached\n      --ip string                                      IPv4 address to assign to the container\n      --ipc string                                     IPC namespace to use (\"host\"|\"private\")\n      --ipfs-address string                            multiaddr of IPFS API (default uses $IPFS_PATH env variable if defined or local directory ~/.ipfs)\n      --isolation string                               Specify isolation technology for container. On Linux the only valid value is default. Windows options are host, process and hyperv with process isolation as the default (default \"default\")\n      --kernel-memory string                           Kernel memory limit (deprecated)\n  -l, --label stringArray                              Set metadata on container\n      --label-file strings                             Set metadata on container from file\n      --log-driver string                              Logging driver for the container. Default is json-file. It also supports logURI (eg: --log-driver binary://&lt;path&gt;) (default \"json-file\")\n      --log-opt stringArray                            Log driver options\n      --mac-address string                             MAC address to assign to the container\n  -m, --memory string                                  Memory limit\n      --memory-reservation string                      Memory soft limit\n      --memory-swap string                             Swap limit equal to memory plus swap: '-1' to enable unlimited swap\n      --memory-swappiness int                          Tune container memory swappiness (0 to 100) (default -1) (default -1)\n      --mount stringArray                              Attach a filesystem mount to the container\n      --name string                                    Assign a name to the container\n      --net strings                                    Connect a container to a network (\"bridge\"|\"host\"|\"none\"|&lt;CNI&gt;) (default [bridge])\n      --network strings                                Connect a container to a network (\"bridge\"|\"host\"|\"none\"|\"container:&lt;container&gt;\"|&lt;CNI&gt;) (default [bridge])\n      --oom-kill-disable                               Disable OOM Killer\n      --oom-score-adj int                              Tune container\u2019s OOM preferences (-1000 to 1000, rootless: 100 to 1000)\n      --pid string                                     PID namespace to use\n      --pidfile string                                 file path to write the task's pid\n      --pids-limit int                                 Tune container pids limit (set -1 for unlimited) (default -1)\n      --platform string                                Set platform (e.g. \"amd64\", \"arm64\")\n      --privileged                                     Give extended privileges to this container\n  -p, --publish strings                                Publish a container's port(s) to the host\n      --pull string                                    Pull image before running (\"always\"|\"missing\"|\"never\") (default \"missing\")\n      --rdt-class string                               Name of the RDT class (or CLOS) to associate the container with\n      --read-only                                      Mount the container's root filesystem as read only\n      --restart string                                 Restart policy to apply when a container exits (implemented values: \"no\"|\"always|on-failure:n|unless-stopped\") (default \"no\")\n      --rm                                             Automatically remove the container when it exits\n      --rootfs                                         The first argument is not an image but the rootfs to the exploded container\n      --runtime string                                 Runtime to use for this container, e.g. \"crun\", or \"io.containerd.runsc.v1\" (default \"io.containerd.runc.v2\")\n      --security-opt stringArray                       Security options\n      --shm-size string                                Size of /dev/shm\n      --stop-signal string                             Signal to stop a container (default \"SIGTERM\")\n      --stop-timeout int                               Timeout (in seconds) to stop a container\n      --sysctl stringArray                             Sysctl options\n      --tmpfs stringArray                              Mount a tmpfs directory\n  -t, --tty                                            Allocate a pseudo-TTY\n      --ulimit strings                                 Ulimit options\n      --umask string                                   Set the umask inside the container. Defaults to 0022\n  -u, --user string                                    Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])\n      --uts string                                     UTS namespace to use\n      --verify string                                  Verify the image (none|cosign|notation) (default \"none\")\n  -v, --volume stringArray                             Bind mount a volume\n      --volumes-from stringArray                       Mount volumes from the specified container(s)\n  -w, --workdir string                                 Working directory inside the container\n</code></pre>"},{"location":"docs/cli-reference/finch_save/","title":"finch save","text":"<p>The archive implements both Docker Image Spec v1.2 and OCI Image Spec v1.0.</p> <pre><code>finch save [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_save/#options","title":"Options","text":"<pre><code>      --all-platforms      Export content for all platforms\n  -h, --help               help for save\n  -o, --output string      Write to a file, instead of STDOUT\n      --platform strings   Export content for a specific platform\n</code></pre>"},{"location":"docs/cli-reference/finch_start/","title":"finch start","text":"<p>Start one or more running containers</p> <pre><code>finch start [flags] CONTAINER [CONTAINER, ...]\n</code></pre>"},{"location":"docs/cli-reference/finch_start/#options","title":"Options","text":"<pre><code>  -a, --attach               Attach STDOUT/STDERR and forward signals\n      --detach-keys string   Override the default detach keys (default \"ctrl-p,ctrl-q\")\n  -h, --help                 help for start\n</code></pre>"},{"location":"docs/cli-reference/finch_stats/","title":"finch stats","text":"<p>Display a live stream of container(s) resource usage statistics.</p> <pre><code>finch stats [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_stats/#options","title":"Options","text":"<pre><code>  -a, --all             Show all containers (default shows just running)\n      --format string   Pretty-print images using a Go template, e.g, '{{json .}}'\n  -h, --help            help for stats\n      --no-stream       Disable streaming stats and only pull the first result\n      --no-trunc        Do not truncate output\n</code></pre>"},{"location":"docs/cli-reference/finch_stop/","title":"finch stop","text":"<p>Stop one or more running containers</p> <pre><code>finch stop [flags] CONTAINER [CONTAINER, ...]\n</code></pre>"},{"location":"docs/cli-reference/finch_stop/#options","title":"Options","text":"<pre><code>  -h, --help       help for stop\n  -t, --time int   Seconds to wait before sending a SIGKILL (default 10)\n</code></pre>"},{"location":"docs/cli-reference/finch_support-bundle_generate/","title":"finch support-bundle generate","text":"<p>Generates a collection of logs and configs that can be uploaded to a Github issue to help debug issues.</p> <pre><code>  finch support-bundle generate [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_support-bundle_generate/#options","title":"Options","text":"<pre><code>      --exclude stringArray   files to exclude from the support bundle. if you specify a base name, all files matching that base name will be excluded. if you specify an absolute or relative path, only exact matches will be excluded\n  -h, --help                  help for generate\n      --include stringArray   additional files to include in the support bundle, specified by absolute or relative path. to include a file from the VM, prefix the file path with \"vm:\"\n</code></pre>"},{"location":"docs/cli-reference/finch_system/","title":"finch system","text":"<p>Manage containerd</p> <pre><code>finch system [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_system/#commands","title":"Commands","text":"<pre><code>  events  Get real time events from the server\n  info    Display system-wide information\n  prune   Remove unused data\n</code></pre>"},{"location":"docs/cli-reference/finch_system/#options","title":"Options","text":"<pre><code>  -h, --help   help for system\n</code></pre>"},{"location":"docs/cli-reference/finch_tag/","title":"finch tag","text":"<p>Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</p> <pre><code>finch tag [flags] SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]\n</code></pre>"},{"location":"docs/cli-reference/finch_tag/#options","title":"Options","text":"<pre><code>  -h, --help   help for tag\n</code></pre>"},{"location":"docs/cli-reference/finch_top/","title":"finch top","text":"<p>Display the running processes of a container</p> <pre><code>finch top CONTAINER [ps OPTIONS] [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_top/#options","title":"Options","text":"<pre><code>  -h, --help   help for top\n</code></pre>"},{"location":"docs/cli-reference/finch_unpause/","title":"finch unpause","text":"<p>Unpause all processes within one or more containers</p> <pre><code>finch unpause [flags] CONTAINER [CONTAINER, ...]\n</code></pre>"},{"location":"docs/cli-reference/finch_unpause/#options","title":"Options","text":"<pre><code>  -h, --help   help for unpause\n</code></pre>"},{"location":"docs/cli-reference/finch_update/","title":"finch update","text":"<p>Update one or more running containers</p> <pre><code>finch update [flags] CONTAINER [CONTAINER, ...]\n</code></pre>"},{"location":"docs/cli-reference/finch_update/#options","title":"Options","text":"<pre><code>      --blkio-weight uint16         Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)\n      --cpu-period uint             Limit CPU CFS (Completely Fair Scheduler) period\n      --cpu-quota int               Limit CPU CFS (Completely Fair Scheduler) quota (default -1)\n      --cpu-shares uint             CPU shares (relative weight)\n      --cpus float                  Number of CPUs\n      --cpuset-cpus string          CPUs in which to allow execution (0-3, 0,1)\n      --cpuset-mems string          MEMs in which to allow execution (0-3, 0,1)\n  -h, --help                        help for update\n      --kernel-memory string        Kernel memory limit (deprecated)\n  -m, --memory string               Memory limit\n      --memory-reservation string   Memory soft limit\n      --memory-swap string          Swap limit equal to memory plus swap: '-1' to enable unlimited swap\n      --pids-limit int              Tune container pids limit (set -1 for unlimited) (default -1)\n      --restart string              Restart policy to apply when a container exits (implemented values: \"no\"|\"always|on-failure:n|unless-stopped\") (default \"no\")\n</code></pre>"},{"location":"docs/cli-reference/finch_version/","title":"finch version","text":"<p>Shows Finch version information</p> <pre><code>  finch version [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_version/#options","title":"Options","text":"<pre><code>  -f, --format string   Format the output using the given Go template, e.g, '{{json .}}'\n  -h, --help            help for version\n</code></pre>"},{"location":"docs/cli-reference/finch_vm_disk/","title":"finch vm disk","text":"<p>Manage virtual machine disk operations.</p> <p>Note: These commands are currently supported on macOS only. Not available on Windows.</p>"},{"location":"docs/cli-reference/finch_vm_disk/#commands","title":"Commands","text":""},{"location":"docs/cli-reference/finch_vm_disk/#disk-info","title":"disk info","text":"<p>Display information about the virtual machine disk.</p> <pre><code>finch vm disk info [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_vm_disk/#options","title":"Options","text":"<pre><code>-h, --help   help for disk info\n</code></pre>"},{"location":"docs/cli-reference/finch_vm_disk/#disk-resize","title":"disk resize","text":"<p>Display information about the virtual machine disk.</p> <pre><code>finch vm disk resize --size &lt;size&gt; [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_vm_disk/#options_1","title":"Options","text":"<pre><code>-h, --help       help for disk resize\n--size string    New size for the disk (e.g., 60GiB) (required)\n</code></pre>"},{"location":"docs/cli-reference/finch_vm_init/","title":"finch vm init","text":"<p>Initialize the virtual machine</p> <pre><code>  finch vm init [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_vm_init/#options","title":"Options","text":"<pre><code>  -h, --help   help for init\n</code></pre>"},{"location":"docs/cli-reference/finch_vm_remove/","title":"finch vm remove","text":"<p>Remove the virtual machine instance</p> <pre><code>  finch vm remove [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_vm_remove/#options","title":"Options","text":"<pre><code>  -f, --force   forcibly remove finch VM\n  -h, --help    help for remove\n</code></pre>"},{"location":"docs/cli-reference/finch_vm_settings/","title":"finch vm settings","text":"<p>Configure the virtual machine instance</p> <pre><code>  finch vm settings [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_vm_settings/#options","title":"Options","text":"<pre><code>      --cpus int        the amount of vCPU to dedicate to the virtual machine (restart the vm when applying this change.)\n  -h, --help            help for settings\n      --memory string   the amount of memory to dedicate to the virtual machine (restart the vm when applying this change.)\n</code></pre>"},{"location":"docs/cli-reference/finch_vm_start/","title":"finch vm start","text":"<p>Start the virtual machine</p> <pre><code>  finch vm start [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_vm_start/#options","title":"Options","text":"<pre><code>  -h, --help   help for start\n</code></pre>"},{"location":"docs/cli-reference/finch_vm_status/","title":"finch vm status","text":"<p>Status of the virtual machine</p> <pre><code>  finch vm status [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_vm_status/#options","title":"Options","text":"<pre><code>  -h, --help   help for status\n</code></pre>"},{"location":"docs/cli-reference/finch_vm_stop/","title":"finch vm stop","text":"<p>Stop the virtual machine</p> <pre><code>  finch vm stop [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_vm_stop/#options","title":"Options","text":"<pre><code>  -f, --force   forcibly stop finch VM\n  -h, --help    help for stop\n</code></pre>"},{"location":"docs/cli-reference/finch_volume/","title":"finch volume","text":"<p>Manage volumes</p> <pre><code>finch volume [flags]\n</code></pre>"},{"location":"docs/cli-reference/finch_volume/#commands","title":"Commands","text":"<pre><code>  create   Create a volume\n  inspect  Display detailed information on one or more volumes\n  ls       List volumes\n  prune    Remove all unused local volumes\n  rm       Remove one or more volumes\n</code></pre>"},{"location":"docs/cli-reference/finch_volume/#options","title":"Options","text":"<pre><code>  -h, --help   help for volume\n</code></pre>"},{"location":"docs/cli-reference/finch_wait/","title":"finch wait","text":"<p>Block until one or more containers stop, then print their exit codes.</p> <pre><code>finch wait [flags] CONTAINER [CONTAINER, ...]\n</code></pre>"},{"location":"docs/cli-reference/finch_wait/#options","title":"Options","text":"<pre><code>  -h, --help   help for wait\n</code></pre>"},{"location":"docs/container-images/authentication/","title":"Registry Authentication","text":""},{"location":"docs/container-images/authentication/#authenticating-to-a-container-registry","title":"Authenticating to a Container Registry","text":"<p>Before a container image can be pushed to a container image repository, it is common for the image registry to ask you to authenticate yourself. Depending on the image registry you are using, you either authenticate yourself through the <code>finch login</code> command, or you can leverage credential helpers, to manage authentication tokens on your behalf.</p>"},{"location":"docs/container-images/authentication/#credential-helper-options","title":"Credential Helper Options","text":"<p>Finch supports the following authentication methods:</p> <ul> <li>Manual configuration: Configure supported helpers like <code>ecr-login</code> in <code>~/.finch/config.json</code>.</li> <li>Manual login: Authenticate directly with <code>finch login</code>.</li> <li>Docker credential helpers: Falls back on Docker's credential helpers if available (requires Docker Desktop).</li> </ul> <p>Important: Finch does not support system credential stores (<code>osxkeychain</code>, <code>wincred</code>, <code>secretservice</code>) directly. Configuring these in <code>~/.finch/config.json</code> will fail to authenticate.</p>"},{"location":"docs/container-images/authentication/#macos-and-windows","title":"macOS and Windows","text":"Amazon ECRAmazon ECR PublicDocker Hub <p>To login to Docker Hub, or any registry with username and password authentication. You can use the finch login command and enter the username and password when prompted.</p> <pre><code>finch login\nEnter Username: username\nEnter Password:\n</code></pre> <p>If the login has been successful, you should see:</p> <pre><code>Login Succeeded\n</code></pre>"},{"location":"docs/container-images/authentication/#using-the-amazon-ecr-credential-helper-to-login-to-amazon-ecr","title":"Using the Amazon ECR Credential Helper to login to Amazon ECR","text":"<p>The Amazon ECR Credential Helper is a credential helper that handles Amazon ECR authentication tokens for you. It does this by leveraging the AWS credentials used by the the AWS CLI, typically these are located on the workstation at <code>~/.aws/credentials</code>.</p> <p>To configure the Amazon ECR credential helper:</p> <ol> <li> <p>Ensure the AWS    credentials    have been configured and are working correctly on the host local machine    before attempting to using the Amazon ECR credential helper.</p> <pre><code>aws sts get-caller-identity\n</code></pre> </li> <li> <p>Add the <code>ecr-login</code> to the <code>creds_helpers</code> section of the Finch    configuration file. The file is found at:     <code>~/.finch/finch.yaml</code>.</p> <pre><code>cpus: 3\nmemory: 4GiB\ncreds_helpers:\n    - ecr-login\n</code></pre> </li> <li> <p>If it does not already exist, add <code>ecr-login</code> to the registry credentials    file located at <code>~/.finch/config.json</code></p> <pre><code>{\n    \"credsStore\": \"ecr-login\"\n}\n</code></pre> </li> <li> <p>Stop and start the Finch virtual machine to pick up the new configuration.</p> <pre><code>finch vm stop\nfinch vm start\n</code></pre> </li> </ol>"},{"location":"docs/container-images/authentication/#using-the-aws-cli-to-login-to-amazon-ecr","title":"Using the AWS CLI to login to Amazon ECR","text":"<p>Alternatively you can use the AWS CLI to retrieve an Amazon ECR authentication token and pass this into Finch with the <code>finch login</code> command. By default this token expires after 12 hours.</p> macOS / bashWindows / PowerShell <pre><code>export AWS_ACCOUNT_ID=111222333444\nexport AWS_REGION=eu-west-1\n\naws ecr get-login-password --region $AWS_REGION | finch login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com\n</code></pre> <pre><code>$AWS_ACCOUNT_ID=\"111222333444\"\n$AWS_REGION=\"eu-west-1\"\n\naws ecr get-login-password --region $AWS_REGION | finch login --username AWS --password-stdin \"$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com\"\n</code></pre> <p>If the login has been successful, you should see:</p> <pre><code>Login Succeeded\n</code></pre>"},{"location":"docs/container-images/authentication/#using-the-amazon-ecr-credential-helper-to-login-to-amazon-ecr-public","title":"Using the Amazon ECR Credential Helper to login to Amazon ECR Public","text":"<p>The Amazon ECR Credential Helper is a credential helper that handles Amazon ECR Public authentication tokens for you. It does this by leveraging the AWS credentials used by the the AWS CLI, typically these are located on the workstation at <code>~/.aws/credentials</code>.</p> <p>To configure the Amazon ECR credential helper:</p> <ol> <li> <p>Ensure the AWS    credentials    have been configured and are working correctly on the host local machine    before attempting to using the Amazon ECR credential helper.</p> <pre><code>aws sts get-caller-identity\n</code></pre> </li> <li> <p>Add the <code>ecr-login</code> to the <code>creds_helpers</code> section of the Finch    configuration file. The file is found at:     <code>~/.finch/finch.yaml</code>.</p> <pre><code>cpus: 3\nmemory: 4GiB\ncreds_helpers:\n    - ecr-login\n</code></pre> </li> <li> <p>If it does not already exist, add <code>ecr-login</code> to the registry credentials    file located at <code>~/.finch/config.json</code></p> <pre><code>{\n    \"credsStore\": \"ecr-login\"\n}\n</code></pre> </li> <li> <p>Stop and start the Finch virtual machine to pick up the new configuration.</p> <pre><code>finch vm stop\nfinch vm start\n</code></pre> </li> </ol>"},{"location":"docs/container-images/authentication/#using-the-aws-cli-to-login-to-amazon-ecr-public","title":"Using the AWS CLI to login to Amazon ECR Public","text":"<p>Alternatively you can use the AWS CLI to retrieve an [Amazon ECR Public] (https://gallery.ecr.aws/) authentication token and pass this into Finch with the <code>finch login</code> command. By default this token expires after 12 hours.</p> <pre><code># Note that the region will always be us-east-1 when authenticating to ECR Public.\naws ecr-public get-login-password --region us-east-1 | finch login --username AWS --password-stdin public.ecr.aws\n</code></pre> <p>If the login has been successful, you should see:</p> <pre><code>Login Succeeded\n</code></pre>"},{"location":"docs/container-images/authentication/#linux","title":"Linux","text":"Amazon ECRAmazon ECR PublicDocker Hub <p>To login to Docker Hub, or any registry with username and password authentication. You can use the finch login command and enter the username and password when prompted.</p> <pre><code>sudo finch login\nEnter Username: username\nEnter Password:\n</code></pre> <p>If the login has been successful, you should see:</p> <pre><code>Login Succeeded\n</code></pre>"},{"location":"docs/container-images/authentication/#using-the-amazon-ecr-credential-helper-to-login-to-amazon-ecr_1","title":"Using the Amazon ECR Credential Helper to login to Amazon ECR","text":"<p>The Amazon ECR Credential Helper is a credential helper that handles Amazon ECR authentication tokens for you. It does this by leveraging the AWS credentials used by the the AWS CLI, typically these are located on the workstation at <code>~/.aws/credentials</code>. Since Finch requires being run as root, this may be <code>/root/.aws/credentials</code>.</p> <p>To configure the Amazon ECR credential helper:</p> <ol> <li> <p>Ensure the AWS    credentials    have been configured and are working correctly on the host local machine    before attempting to using the Amazon ECR credential helper.</p> <pre><code>aws sts get-caller-identity\n</code></pre> </li> <li> <p>Install the ecr credential helper by following these steps.</p> </li> <li> <p>If it does not already exist, add <code>ecr-login</code> to the registry credentials    file located at <code>/root/.docker/config.json</code></p> <pre><code>{\n    \"credsStore\": \"ecr-login\"\n}\n</code></pre> </li> </ol>"},{"location":"docs/container-images/authentication/#using-the-aws-cli-to-login-to-amazon-ecr_1","title":"Using the AWS CLI to login to Amazon ECR","text":"<p>Alternatively you can use the AWS CLI to retrieve an Amazon ECR authentication token and pass this into Finch with the <code>finch login</code> command. By default this token expires after 12 hours.</p> <pre><code>export AWS_ACCOUNT_ID=111222333444\nexport AWS_REGION=eu-west-1\n\naws ecr get-login-password --region $AWS_REGION | sudo -E finch login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com\n</code></pre> <p>If the login has been successful, you should see:</p> <pre><code>Login Succeeded\n</code></pre>"},{"location":"docs/container-images/authentication/#using-the-amazon-ecr-credential-helper-to-login-to-amazon-ecr-public_1","title":"Using the Amazon ECR Credential Helper to login to Amazon ECR Public","text":"<p>The Amazon ECR Credential Helper is a credential helper that handles Amazon ECR Public authentication tokens for you. It does this by leveraging the AWS credentials used by the the AWS CLI, typically these are located on the workstation at <code>~/.aws/credentials</code>.</p> <p>To configure the Amazon ECR credential helper:</p> <ol> <li> <p>Ensure the AWS    credentials    have been configured and are working correctly on the host local machine    before attempting to using the Amazon ECR credential helper.</p> <pre><code>aws sts get-caller-identity\n</code></pre> </li> <li> <p>Install the ecr credential helper by following these steps.</p> </li> <li> <p>If it does not already exist, add <code>ecr-login</code> to the registry credentials    file located at <code>/root/.docker/config.json</code></p> <pre><code>{\n    \"credsStore\": \"ecr-login\"\n}\n</code></pre> </li> </ol>"},{"location":"docs/container-images/authentication/#using-the-aws-cli-to-login-to-amazon-ecr-public_1","title":"Using the AWS CLI to login to Amazon ECR Public","text":"<p>Alternatively you can use the AWS CLI to retrieve an [Amazon ECR Public] (https://gallery.ecr.aws/) authentication token and pass this into Finch with the <code>finch login</code> command. By default this token expires after 12 hours.</p> <pre><code># Note that the region will always be us-east-1 when authenticating to ECR Public.\naws ecr-public get-login-password --region us-east-1 | sudo finch login --username AWS --password-stdin public.ecr.aws\n</code></pre> <p>If the login has been successful, you should see:</p> <pre><code>Login Succeeded\n</code></pre>"},{"location":"docs/container-images/lazy-loading/","title":"Lazy Loading","text":"<p>Lazy loading container images is a technique where instead of downloading all of the container image data then starting the container, instead you start the container first and only download container image data when the application requests it. Reducing the time taken to launch containers.</p> <p>Within Finch you can change the containerd snapshotter, the containerd component that manages the container images, to allow you to use lazy loading container images. At this time only the Seekable OCI (SOCI) lazy loading snapshotter is supported.</p>"},{"location":"docs/container-images/lazy-loading/#enable-the-soci-snapshotter","title":"Enable the SOCI Snapshotter","text":"<p>First, we must make sure the SOCI snapshotter is enabled and configured.</p> macOSWindowsLinux <p>To enable the SOCI snapshotter, you need to edit the Finch configuration file and add the SOCI snapshotter. The Finch configuration file is typically located at <code>~/.finch/finch.yaml</code></p> <pre><code>snapshotters:\n    - soci\n</code></pre> <p>After adding SOCI to the Finch configuration file you need to start and stop the Finch virtual machine.</p> <pre><code>finch vm stop\nfinch vm start\n</code></pre> <p>To enable the SOCI snapshotter, you need to edit the Finch configuration file and add the SOCI snapshotter. The Finch configuration file is typically located at <code>%LocalAppData%\\.finch\\finch.yaml</code></p> <pre><code>snapshotters:\n    - soci\n</code></pre> <p>After adding SOCI to the Finch configuration file you need to start and stop the Finch virtual machine.</p> <pre><code>finch vm stop\nfinch vm start\n</code></pre> <p>Refer to the Linux Optional Components page to setup SOCI on Linux.</p>"},{"location":"docs/container-images/lazy-loading/#generate-soci-indexes","title":"Generate SOCI Indexes","text":"<p>In Finch you can generate Seekable OCI (SOCI) Indexes to enable container images to be lazy loaded in other environments.</p> <p>Before a SOCI index can be generated, the container image needs to exist locally. This could be because you have just built the container image from <code>finch build</code> or maybe because you have downloaded an existing image from a container repository with <code>finch pull</code>.</p> <p>Finch generates the SOCI index when the container image is pushed to a container repository. Therefore before pushing the container image we may need to retag the container image with <code>finch tag</code>, adding the destination repository to the container image name. To generate the SOCI index and to push the container image use the <code>finch push --snapshotter soci</code> command.</p> macOS / bashWindows / PowerShellLinux <pre><code>AWS_ACCOUNT_ID=111222333444\nAWS_REGION=eu-west-1\n\nfinch push --snapshotter soci \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/myimage:latest\n</code></pre> <pre><code>$AWS_ACCOUNT_ID=\"111222333444\"\n$AWS_REGION=\"eu-west-1\"\n\nfinch push --snapshotter soci `\n    \"$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/myimage:latest\"\n</code></pre> <pre><code>AWS_ACCOUNT_ID=111222333444\nAWS_REGION=eu-west-1\n\nsudo -E finch push --snapshotter soci \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/myimage:latest\n</code></pre> <p>In the output, you will see that Finch first pushes the container image up to the container registry.</p> <pre><code>manifest-sha256:fd96e40d576375699bd94093a2a5005d857d252e25ab35e03294069e90d856da: done           |++++++++++++++++++++++++++++++++++++++|\nconfig-sha256:7cbe3f4c79232396f3d55fafefb47f23aba5dee91934c68be4fc6a7e497a0b22:   done           |++++++++++++++++++++++++++++++++++++++|\nelapsed: 22.7s                                                                    total:  2.2 Ki (97.0 B/s)\n</code></pre> <p>Finch will then generate the SOCI index and push that to the container image repository to sit alongside the container image.</p> <pre><code>INFO[0022] soci: ztoc skipped - layer sha256:5aca968bda346aa3f3ae7e781a45d10a1f17df3d45a4bc05f201b7261e127c36 (application/vnd.docker.image.rootfs.diff.tar.gzip) size 628 is less than min-layer-size 10485760\nINFO[0024] soci: layer sha256:2b92a4a464539d6c28ffd6b40875226086ace1e24d6598d771d8a65a6938acb1 -&gt; ztoc sha256:495590adbcade7a74ddf76463c8e912ea1de56f4cf20e36ee9146ac8939b4301\nINFO[0027] soci: layer sha256:b3c399da943c0747be26ad2d7858e7c1eac894c51592dfe10c98b0737b07609d -&gt; ztoc sha256:41797408337b0bff3b57626338c482a2c0bc09383c24af5a26d8545ec96920d7\nINFO[0027] soci: checking if a soci index already exists in remote repository...\nINFO[0027] soci: pushing soci index with digest: sha256:b8005edf213e3ef96bff588690c618a778adb88801db7acf9256b0bdd841b006\nINFO[0027] soci: pushing artifact with digest: sha256:495590adbcade7a74ddf76463c8e912ea1de56f4cf20e36ee9146ac8939b4301\nINFO[0027] soci: pushing artifact with digest: sha256:44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a\nINFO[0027] soci: skipped artifact with digest: sha256:fd96e40d576375699bd94093a2a5005d857d252e25ab35e03294069e90d856da\nINFO[0027] soci: pushing artifact with digest: sha256:41797408337b0bff3b57626338c482a2c0bc09383c24af5a26d8545ec96920d7\nINFO[0028] soci: successfully pushed artifact with digest: sha256:44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a\nINFO[0028] soci: successfully pushed artifact with digest: sha256:495590adbcade7a74ddf76463c8e912ea1de56f4cf20e36ee9146ac8939b4301\nINFO[0029] soci: successfully pushed artifact with digest: sha256:41797408337b0bff3b57626338c482a2c0bc09383c24af5a26d8545ec96920d7\nINFO[0029] soci: pushing artifact with digest: sha256:b8005edf213e3ef96bff588690c618a778adb88801db7acf9256b0bdd841b006\nINFO[0030] soci: successfully pushed artifact with digest: sha256:b8005edf213e3ef96bff588690c618a778adb88801db7acf9256b0bdd841b006\n</code></pre>"},{"location":"docs/container-images/lazy-loading/#lazy-load-a-container-image-with-soci","title":"Lazy Load a container image with SOCI","text":"<p>To lazy load a container image with SOCI, ensure that the image does not exist on the local virtual machine with <code>finch image ls</code> and that a SOCI index has been generated and is stored in the container repository alongside the container image.</p> <p>To run the container, you need to pass <code>--snapshotter soci</code> into the <code>finch run</code> command.</p> macOS / bashWindows / PowerShellLinux <pre><code>AWS_ACCOUNT_ID=111222333444\nAWS_REGION=eu-west-1\n\nfinch run --snapshotter soci \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/myimage:latest\n</code></pre> <pre><code>$AWS_ACCOUNT_ID=\"111222333444\"\n$AWS_REGION=\"eu-west-1\"\n\nfinch run --snapshotter soci `\n    \"$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/myimage:latest\"\n</code></pre> <pre><code>AWS_ACCOUNT_ID=111222333444\nAWS_REGION=eu-west-1\n\nsudo -E finch run --snapshotter soci \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/myimage:latest\n</code></pre> <p>Successful Lazy Loading</p> <p>If the container image has been successfully lazy loaded you should notice an improvement in launch time, additionally when the image was downloaded, you should not see each layer being individually downloaded.</p> <pre><code>$ finch run --snapshotter soci $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/myimage:latest\n111222333444.dkr.ecr.eu-west-1.amazonaws.com/myimage:latest:                      resolved       |++++++++++++++++++++++++++++++++++++++|\nmanifest-sha256:fd96e40d576375699bd94093a2a5005d857d252e25ab35e03294069e90d856da: done           |++++++++++++++++++++++++++++++++++++++|\nconfig-sha256:7cbe3f4c79232396f3d55fafefb47f23aba5dee91934c68be4fc6a7e497a0b22:   done           |++++++++++++++++++++++++++++++++++++++|\nelapsed: 15.4s\n</code></pre> <p>Unsuccessful Lazy Loading</p> <p>If a SOCI Index does not exist or if the <code>soci-snapshotter</code> is unable to access the SOCI Index, the snapshotter will fail back to downloading the container image in full before starting the container image. The most obvious way to know this has happened is that each container image layer will be downloaded in full, before the container starts.</p> <pre><code>$ finch run --snapshotter soci $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/myimage:latest\n111222333444.dkr.ecr.eu-west-1.amazonaws.com/myimage:latest:                      resolved       |++++++++++++++++++++++++++++++++++++++|\nmanifest-sha256:fd96e40d576375699bd94093a2a5005d857d252e25ab35e03294069e90d856da: done           |++++++++++++++++++++++++++++++++++++++|\nconfig-sha256:7cbe3f4c79232396f3d55fafefb47f23aba5dee91934c68be4fc6a7e497a0b22:   done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:5aca968bda346aa3f3ae7e781a45d10a1f17df3d45a4bc05f201b7261e127c36:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:2b92a4a464539d6c28ffd6b40875226086ace1e24d6598d771d8a65a6938acb1:    downloading    |++++++++++++++++++++++----------------| 35.0 MiB/59.6 MiB\nlayer-sha256:b3c399da943c0747be26ad2d7858e7c1eac894c51592dfe10c98b0737b07609d:    downloading    |++++++--------------------------------| 28.8 MiB/179.7 MiB\nelapsed: 22.0s                                                                    total:  63.8 M (5.3 MiB/s)\n</code></pre>"},{"location":"docs/container-images/signing-images/","title":"Container Image Signing","text":"<p>Finch supports signing and verifying container images with cosign.</p>"},{"location":"docs/container-images/signing-images/#cosign-prerequisites","title":"Cosign Prerequisites","text":"<p>Before you can leverage Finch to sign container images you will need to have the <code>cosign</code> binary on your local machine to generate the private / public keys. See the cosign documentation to find the various installation options.</p> <p>Cosign supports self-managed keys and keyless signing. At this time only self-managed keys are supported on Finch.</p>"},{"location":"docs/container-images/signing-images/#generate-a-self-managed-key","title":"Generate a Self Managed Key","text":"<p>Before we can sign a container image, you need to generate a self managed key. This could be a new key generated by cosign or an imported existing key. To generate a new key:</p> <ol> <li> <p>Generate a cosign private and public key.</p> <pre><code>cosign generate-key-pair\n</code></pre> <p>A cosign private and public key will be created and placed in the directory where the command was run, this key could also be stored in a KMS.</p> </li> </ol>"},{"location":"docs/container-images/signing-images/#sign-a-container-image-with-cosign","title":"Sign a container image with cosign","text":"<ol> <li> <p>To sign a container image, the image needs to exist locally. This could be an    existing container image pulled down from a remote registry to be signed or a    new image that has just been built by <code>finch build</code>. In this walkthrough we    will pull down an existing image.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch pull public.ecr.aws/finch/hello-finch:latest\n</code></pre> <pre><code>finch pull public.ecr.aws/finch/hello-finch:latest\n</code></pre> <pre><code>sudo finch pull public.ecr.aws/finch/hello-finch:latest\n</code></pre> </li> <li> <p>A container image is signed with Finch when it is pushed to a container    registry, therefore in preparation for the <code>finch push</code> we need to re tag the    container image with the an appropriate destination tag. A container    repository may also need to be created in the upstream repository. The below    command is tagging the container image to an Amazon ECR repository URI, but    this could be any OCI container registry.</p> macOS / bashWindows / PowerShellLinux <pre><code>AWS_ACCOUNT_ID=111222333444\nAWS_REGION=eu-west-1\n\nfinch tag \\\n    public.ecr.aws/finch/hello-finch:latest \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\n</code></pre> <pre><code>$AWS_ACCOUNT_ID=\"111222333444\"\n$AWS_REGION=\"eu-west-1\"\n\nfinch tag `\n    public.ecr.aws/finch/hello-finch:latest `\n    \"$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\"\n</code></pre> <pre><code>AWS_ACCOUNT_ID=111222333444\nAWS_REGION=eu-west-1\n\nsudo finch -E tag \\\n    public.ecr.aws/finch/hello-finch:latest \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\n</code></pre> </li> <li> <p>Push and sign the container image with the <code>finch push --sign cosign</code>    command.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch push \\\n    --sign=cosign  \\\n    --cosign-key cosign.key \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\n</code></pre> <pre><code>finch push `\n    --sign=cosign  `\n    --cosign-key cosign.key `\n    \"$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\"\n</code></pre> <pre><code>sudo finch -E push \\\n    --sign=cosign  \\\n    --cosign-key cosign.key \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\n</code></pre> </li> <li> <p>Verify the Container Image and the Signature with the <code>cosign verify</code> command.</p> macOS / bashWindows / PowerShellLinux <pre><code>cosign verify \\\n    --key cosign.pub \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\n</code></pre> <pre><code>cosign verify `\n    --key cosign.pub `\n    \"$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\"\n</code></pre> <pre><code>cosign verify \\\n    --key cosign.pub \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\n</code></pre> </li> </ol>"},{"location":"docs/container-images/signing-images/#verify-a-container-image-signature-with-cosign","title":"Verify a Container Image Signature with cosign","text":"<p>Once a container image has been signed and pushed to a registry, you can verify the signature against the public key when you pull and run the container image.</p>"},{"location":"docs/container-images/signing-images/#pulling-a-container-image","title":"Pulling a Container Image","text":"<p>To verify the image signature when pulling a container image, you can pass the <code>--verify</code> flag in to the <code>finch pull</code> command. Ensure you have access to the public key that signed the container image and that it is stored in the local directory.</p> macOS / bashWindows / PowerShellLinux <pre><code>AWS_ACCOUNT_ID=111222333444\nAWS_REGION=eu-west-1\n\nfinch pull \\\n    --verify=cosign  \\\n    --cosign-key cosign.pub \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\n</code></pre> <pre><code>$AWS_ACCOUNT_ID=\"111222333444\"\n$AWS_REGION=\"eu-west-1\"\n\nfinch pull `\n    --verify=cosign  `\n    --cosign-key cosign.pub `\n    \"$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\"\n</code></pre> <pre><code>AWS_ACCOUNT_ID=111222333444\nAWS_REGION=eu-west-1\n\nsudo -E finch pull \\\n    --verify=cosign  \\\n    --cosign-key cosign.pub \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\n</code></pre>"},{"location":"docs/container-images/signing-images/#running-a-container-image","title":"Running a Container Image","text":"<p>To verify the image signature when running a container, you can pass the <code>--verify</code> flag in to the <code>finch run</code> command. Ensure you have access to the public key that signed the container image and that it is stored in the local directory.</p> macOS / bashWindows / PowerShellLinux <pre><code>AWS_ACCOUNT_ID=111222333444\nAWS_REGION=eu-west-1\n\nfinch run --rm \\\n    --verify=cosign  \\\n    --cosign-key cosign.pub \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\n</code></pre> <pre><code>$AWS_ACCOUNT_ID=\"111222333444\"\n$AWS_REGION=\"eu-west-1\"\n\nfinch run --rm `\n    --verify=cosign  `\n    --cosign-key cosign.pub `\n    \"$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\"\n</code></pre> <pre><code>AWS_ACCOUNT_ID=111222333444\nAWS_REGION=eu-west-1\n\nsudo -E finch run --rm \\\n    --verify=cosign  \\\n    --cosign-key cosign.pub \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\n</code></pre>"},{"location":"docs/container-images/signing-images/#container-image-signing-with-compose-and-cosign","title":"Container Image Signing with Compose and cosign","text":"<p>When leveraging Compose to define services, you can use the <code>x-nerdctl-sign</code> and <code>x-nerdctl-verify</code> keys to sign and verify container images.</p> <p>In this walkthrough we will use the hello-finch sample application.</p> <pre><code>git clone https://github.com/runfinch/finch.git\ncd finch/contrib/hello-finch\n</code></pre>"},{"location":"docs/container-images/signing-images/#sign-a-container-image-with-compose","title":"Sign a container image with compose","text":"<ol> <li> <p>Create a Compose file. We define the <code>hello-finch</code> service, pass a <code>build</code>    key to provide the build context, as well as a <code>x-nerdctl-sign</code> and    <code>x-nerdctl-cosign-private-key</code> keys.</p> macOS / bashWindows / PowerShellLinux <pre><code>cat &lt;&lt;EOF &gt; compose.yaml\nservices:\n  hello-finch:\n    image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\n    build: .\n    x-nerdctl-sign: cosign\n    x-nerdctl-cosign-private-key: cosign.key\nEOF\n</code></pre> <pre><code>@\"\nservices:\n  hello-finch:\n    image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\n    build: .\n    x-nerdctl-sign: cosign\n    x-nerdctl-cosign-private-key: cosign.key\n\"@ &gt; compose.yaml\n</code></pre> <pre><code>cat &lt;&lt;EOF &gt; compose.yaml\nservices:\n  hello-finch:\n    image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\n    build: .\n    x-nerdctl-sign: cosign\n    x-nerdctl-cosign-private-key: cosign.key\nEOF\n</code></pre> </li> <li> <p>Build the container image <code>finch compose build</code></p> <pre><code>finch compose build\n</code></pre> </li> <li> <p>Finally push the container image up to the container registry, ensuring the    cosign keys are generated and exist locally.</p> <pre><code>finch compose push\n</code></pre> </li> <li> <p>To verify the container image and the signature have been pushed correctly,    you can use the <code>cosign verify</code> command.</p> macOS / bashWindows / PowerShellLinux <pre><code>cosign verify \\\n    --key cosign.pub \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\n</code></pre> <pre><code>cosign verify `\n    --key cosign.pub `\n    \"$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\"\n</code></pre> <pre><code>cosign verify \\\n    --key cosign.pub \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\n</code></pre> </li> </ol>"},{"location":"docs/container-images/signing-images/#verify-a-container-image-with-compose","title":"Verify a container image with compose","text":"<ol> <li> <p>To verify a container image signature, update the existing compose file with    the <code>x-nerdctl-verify</code> and <code>x-nerdctl-cosign-public-key</code> keys.</p> macOS / bashWindows / PowerShellLinux <pre><code>cat &lt;&lt;EOF &gt; compose.yaml\nservices:\n  hello-finch:\n    image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\n    build: .\n    x-nerdctl-sign: cosign\n    x-nerdctl-cosign-private-key: cosign.key\n    x-nerdctl-verify: cosign\n    x-nerdctl-cosign-public-key: cosign.pub\nEOF\n</code></pre> <pre><code>@\"\nservices:\n  hello-finch:\n    image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\n    build: .\n    x-nerdctl-sign: cosign\n    x-nerdctl-cosign-private-key: cosign.key\n    x-nerdctl-verify: cosign\n    x-nerdctl-cosign-public-key: cosign.pub\n\"@ &gt; compose.yaml\n</code></pre> <pre><code>cat &lt;&lt;EOF &gt; compose.yaml\nservices:\n  hello-finch:\n    image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch\n    build: .\n    x-nerdctl-sign: cosign\n    x-nerdctl-cosign-private-key: cosign.key\n    x-nerdctl-verify: cosign\n    x-nerdctl-cosign-public-key: cosign.pub\nEOF\n</code></pre> </li> <li> <p>The image signatures can be verified when pulling the container images.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch compose pull\n</code></pre> <pre><code>finch compose pull\n</code></pre> <pre><code>sudo finch compose pull\n</code></pre> </li> <li> <p>Signatures can also be verified when running the containers.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch compose run\n</code></pre> <pre><code>finch compose run\n</code></pre> <pre><code>sudo finch compose run\n</code></pre> </li> </ol>"},{"location":"docs/finch-reference/","title":"Docs","text":"<p>In this section you can find the complete reference documentation for all of the different features and settings that Finch has to offer.</p> <p>\ud83d\udc48 Please use the side-navigation on the left in order to browse the different topics.</p>"},{"location":"docs/getting-started/building-images/","title":"Building Container Images","text":"<p>Finch leverages Moby's BuildKit to build container images defined in a Dockerfile. To interact with BuildKit you use the <code>finch build</code> command.</p>"},{"location":"docs/getting-started/building-images/#building-a-container-image","title":"Building a Container Image","text":"<p>A sample application called hello-finch is included in the Finch Repository. In this guide we will clone this Finch repository, and build hello-finch.</p> <ol> <li> <p>Clone the Finch repository.</p> <pre><code>git clone https://github.com/runfinch/finch.git\n</code></pre> </li> <li> <p>Navigate to the    hello-finch    application.</p> <pre><code>cd finch/contrib/hello-finch\n</code></pre> </li> <li> <p>Build    hello-finch    with the <code>finch build</code>. Here we specifying the tag that we want to use for    the image, as well as where the build context can be found.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch build --tag hello-finch .\n</code></pre> <pre><code>finch build --tag hello-finch .\n</code></pre> <pre><code>sudo finch build --tag hello-finch .\n</code></pre> </li> <li> <p>You can see the newly build container image in the image store using the    <code>finch image list</code> command.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch image list\n</code></pre> <pre><code>finch image list\n</code></pre> <pre><code>sudo finch image list\n</code></pre> <p>The output shows your new container image, the platform it was built for and the uncompressed size.</p> <pre><code>REPOSITORY     TAG       IMAGE ID        CREATED        PLATFORM       SIZE       BLOB SIZE\nhello-finch    latest    69b2528740fe    2 weeks ago    linux/arm64    1.8 MiB    1008.4 KiB\n</code></pre> </li> </ol>"},{"location":"docs/getting-started/building-images/#building-a-multi-architecture-container-image","title":"Building a Multi Architecture Container Image","text":"<p>By default Finch will build a container image that corresponds to your local machine, i.e. an x86 container image when running on an Intel machine, an arm64 when running on a Apple Silicon machine. If you wish to build a container image for an alternative architecture, or multiple architectures at the same time, then you can use the <code>--platform</code> flag with <code>finch build</code>.</p> <ol> <li> <p>Once again we will build the    hello-finch    demo application. If you haven't already, clone the    Finch repository.</p> <pre><code>git clone https://github.com/runfinch/finch.git\n</code></pre> </li> <li> <p>Navigate to the    hello-finch    application.</p> <pre><code>cd finch/contrib/hello-finch\n</code></pre> </li> <li> <p>Build    hello-finch    with the <code>finch build</code>. Here we specify an alternative architecture with the    <code>--platform</code> flag. Here you could specify a single architecture <code>--platform    linux/amd64</code> or multiple architectures <code>--platform linux/arm64,linux/amd64</code>.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch build \\\n  --platform linux/arm64,linux/amd64 \\\n  --tag hello-finch \\\n  .\n</code></pre> <pre><code>finch build `\n  --platform linux/arm64,linux/amd64 `\n  --tag hello-finch `\n  .\n</code></pre> <pre><code>sudo finch build \\\n  --platform linux/arm64,linux/amd64 \\\n  --tag hello-finch \\\n  .\n</code></pre> </li> <li> <p>You can see both container images in the local image store, with the <code>finch    image list</code> command.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch image list\n</code></pre> <pre><code>finch image list\n</code></pre> <pre><code>sudo finch image list\n</code></pre> <p>Notice how there are 2 images, one for each architecture.</p> <pre><code>REPOSITORY     TAG       IMAGE ID        CREATED        PLATFORM       SIZE       BLOB SIZE\nhello-finch    latest    5874669344b3    2 weeks ago    linux/arm64    1.8 MiB    1009.0 KiB\nhello-finch    latest    5874669344b3    2 weeks ago    linux/amd64    0.0 B      1.0 MiB\n</code></pre> </li> </ol>"},{"location":"docs/getting-started/building-images/#next-steps","title":"Next Steps","text":"<p>In this short section, you learned how to build container images on finch.</p> <ul> <li>To learn how to run these Container Images navigate to Running   Containers</li> <li>To learn more about the <code>finch build</code> command see the CLI   Reference</li> </ul>"},{"location":"docs/getting-started/compose/","title":"Using Compose with Finch","text":"<p>Containerized applications composed of multiple services are often defined in Docker Compose files. Finch offers a CLI that is compatible to the docker compose cli, therefore commands that you have used previously like <code>docker compose up</code> could be translated to <code>finch compose up</code>.</p>"},{"location":"docs/getting-started/compose/#building-containers-images-with-a-compose-file","title":"Building Containers Images with a Compose File","text":"<p>A service defined in a compose file can be built with the <code>finch compose</code> command. To do so, add the build key, with the value set as local context to use.</p> <ol> <li> <p>In the    hello-finch    sample application directory, we can create a Compose file. In the file we    define the <code>hello-finch</code> service and provide a context for the container    image build.</p> macOS / bashWindows / PowerShellLinux <pre><code>git clone https://github.com/runfinch/finch.git\ncd finch/contrib/hello-finch\n\n# Add a Compose File to the Directory\ncat &lt;&lt;EOF &gt; compose.yaml\nservices:\n  hello-finch:\n    image: hello-finch\n    build: .\nEOF\n</code></pre> <pre><code>git clone https://github.com/runfinch/finch.git\ncd finch/contrib/hello-finch\n\n# Add a Compose File to the Directory\n@\"\nservices:\n  hello-finch:\n    image: hello-finch\n    build: .\n\"@ &gt; compose.yaml\n</code></pre> <pre><code>git clone https://github.com/runfinch/finch.git\ncd finch/contrib/hello-finch\n\n# Add a Compose File to the Directory\ncat &lt;&lt;EOF &gt; compose.yaml\nservices:\n  hello-finch:\n    image: hello-finch\n    build: .\nEOF\n</code></pre> </li> <li> <p>Build the container images using <code>finch compose build</code>.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch compose build\n</code></pre> <pre><code>finch compose build\n</code></pre> <pre><code>sudo finch compose build\n</code></pre> </li> <li> <p>You can verify that the container image has been built successfully using the    <code>finch image list</code> command.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch image list\n</code></pre> <pre><code>finch image list\n</code></pre> <pre><code>sudo finch image list\n</code></pre> <p>The output should show the container image tagged with the service name.</p> <pre><code>REPOSITORY     TAG       IMAGE ID        CREATED           PLATFORM       SIZE       BLOB SIZE\nhello-finch    latest    69b2528740fe    49 seconds ago    linux/arm64    1.8 MiB    1008.4 KiB\n</code></pre> </li> </ol>"},{"location":"docs/getting-started/compose/#running-containers-with-a-compose-file","title":"Running Containers with a Compose File","text":"<p>1 or more services can be defined in a compose file, and then all services can be started with the <code>finch compose up</code> command.</p> <ol> <li> <p>Leveraging the    hello-finch    sample application, we can create a Compose file. In the file we    define the <code>hello-finch</code> service and provide a context for the container    image build.</p> macOS / bashWindows / PowerShellLinux <pre><code>git clone https://github.com/runfinch/finch.git\ncd finch/contrib/hello-finch\n\n# Add a Compose File to the Directory\ncat &lt;&lt;EOF &gt; compose.yaml\nservices:\n  hello-finch:\n    image: hello-finch\n    build: .\nEOF\n</code></pre> <pre><code>git clone https://github.com/runfinch/finch.git\ncd finch/contrib/hello-finch\n\n# Add a Compose File to the Directory\n@\"\nservices:\n  hello-finch:\n    image: hello-finch\n    build: .\n\"@ &gt; compose.yaml\n</code></pre> <pre><code>git clone https://github.com/runfinch/finch.git\ncd finch/contrib/hello-finch\n\n# Add a Compose File to the Directory\ncat &lt;&lt;EOF &gt; compose.yaml\nservices:\n  hello-finch:\n    image: hello-finch\n    build: .\nEOF\n</code></pre> </li> <li> <p>Next we will run the service with <code>finch compose up</code>, if the container image    does not exist locally, finch will build the container image before starting    the service.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch image list\n</code></pre> <pre><code>finch image list\n</code></pre> <pre><code>sudo finch compose up\n</code></pre> <p>Upon success, the output should look something like the following:</p> <pre><code>INFO[0018] Creating container hello-finch_hello-finch_1\nINFO[0018] Attaching to logs\nhello-finch_1 |\nhello-finch_1 |                            @@@@@@@@@@@@@@@@@@@\nhello-finch_1 |                        @@@@@@@@@@@@    @@@@@@@@@@@\nhello-finch_1 |                      @@@@@@@                  @@@@@@@\nhello-finch_1 |                    @@@@@@                        @@@@@@\nhello-finch_1 |                  @@@@@@                            @@@@@\nhello-finch_1 |                 @@@@@                      @@@#     @@@@@@@@@\nhello-finch_1 |                @@@@@                     @@   @@@       @@@@@@@@@@\nhello-finch_1 |                @@@@%                     @     @@            @@@@@@@@@@@\nhello-finch_1 |                @@@@                                               @@@@@@@@\nhello-finch_1 |                @@@@                                         @@@@@@@@@@@&amp;\nhello-finch_1 |                @@@@@                                  &amp;@@@@@@@@@@@\nhello-finch_1 |                 @@@@@                               @@@@@@@@\nhello-finch_1 |                  @@@@@                            @@@@@(\nhello-finch_1 |                   @@@@@@                        @@@@@@\nhello-finch_1 |                     @@@@@@@                  @@@@@@@\nhello-finch_1 |                        @@@@@@@@@@@@@@@@@@@@@@@@@@\nhello-finch_1 |                            @@@@@@@@@@@@@@@@@@\nhello-finch_1 |\nhello-finch_1 |\nhello-finch_1 |Hello from Finch!\nhello-finch_1 |\nhello-finch_1 |Visit us @ github.com/runfinch\nhello-finch_1 |\nINFO[0018] Container \"hello-finch_hello-finch_1\" exited\nINFO[0018] All the containers have exited\nINFO[0018] Stopping containers (forcibly)\nINFO[0018] Stopping container hello-finch_hello-finch_1\n</code></pre> </li> </ol>"},{"location":"docs/getting-started/compose/#next-steps","title":"Next Steps","text":"<p>In this short section, you learned how to use Compose files with Finch.</p> <ul> <li>To learn about leveraging Compose files with Finch, see the Finch   Compose reference.</li> </ul>"},{"location":"docs/getting-started/installation/","title":"Installing Finch","text":"<p>To install Finch, please see the dedicated section for each operating system family:</p> <ul> <li>macos</li> <li>Windows</li> <li>Linux</li> </ul>"},{"location":"docs/getting-started/installation/#verify-the-finch-installation","title":"Verify the Finch Installation","text":"<p>Once Finch has been successfully installed, you can verify the installation with the following steps.</p> <ol> <li> <p>On macOS and Windows (skip on Linux), ensure the Finch virtual machine is initialized and running with the    <code>finch vm init</code>. This initial setup usually takes about a minute, and may    once again require the users password.</p> <pre><code>$ finch vm init\n</code></pre> </li> <li> <p>Verify that everything is working correctly by attempting to run the Finch    demonstration container image <code>hello-finch</code>.</p> macOSWindows / PowerShellLinux <pre><code>$ finch run public.ecr.aws/finch/hello-finch:latest\n</code></pre> <pre><code>$ finch run public.ecr.aws/finch/hello-finch:latest\n</code></pre> <pre><code>$ sudo finch run public.ecr.aws/finch/hello-finch:latest\n</code></pre> <p>If everything is ok, you should now see the output:</p> <pre><code>                            @@@@@@@@@@@@@@@@@@@\n                        @@@@@@@@@@@@    @@@@@@@@@@@\n                      @@@@@@@                  @@@@@@@\n                    @@@@@@                        @@@@@@\n                  @@@@@@                            @@@@@\n                 @@@@@                      @@@#     @@@@@@@@@\n                @@@@@                     @@   @@@       @@@@@@@@@@\n                @@@@%                     @     @@            @@@@@@@@@@@\n                @@@@                                               @@@@@@@@\n                @@@@                                         @@@@@@@@@@@&amp;\n                @@@@@                                  &amp;@@@@@@@@@@@\n                 @@@@@                               @@@@@@@@\n                  @@@@@                            @@@@@(\n                   @@@@@@                        @@@@@@\n                     @@@@@@@                  @@@@@@@\n                        @@@@@@@@@@@@@@@@@@@@@@@@@@\n                            @@@@@@@@@@@@@@@@@@\n\n\nHello from Finch!\n\nVisit us @ github.com/runfinch\n</code></pre> </li> </ol>"},{"location":"docs/getting-started/installation/#next-steps","title":"Next Steps","text":"<p>In this short guide you learned how to install Finch on to your workstation and start the virtual machine.</p> <ul> <li>To learn how to run your first containerized application see Running   Containers.</li> </ul>"},{"location":"docs/getting-started/pushing-images/","title":"Pushing Container Images","text":"<p>In building container images we built the hello-finch container image. In this section we will push the container image from the local workstation up to a container repository using the <code>finch push</code> command.</p> <p>In the section we are pushing the container image to an existing Amazon ECR repository, if you are using an alternative container registry the authentication method and the container image tag will be different.</p> <ol> <li> <p>Before pushing a container image, ensure the container image exists in the    local image store.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch image list\n</code></pre> <pre><code>finch image list\n</code></pre> <pre><code>sudo finch image list\n</code></pre> <p>In the output you should see a list of all of the container images stored in the local container store.</p> <pre><code>REPOSITORY     TAG       IMAGE ID        CREATED        PLATFORM       SIZE       BLOB SIZE\nhello-finch    latest    69b2528740fe    2 weeks ago    linux/arm64    1.8 MiB    1008.4 KiB\n</code></pre> </li> <li> <p>Within a container image name, we specify the container image repository    where we want that image to be stored. To change the change name of the    container image to the include the container image repository we use the    <code>finch tag</code> command. The following example renames the container image to an    Amazon ECR container image repo repository.</p> macOS / bashWindows / PowerShellLinux <pre><code>export AWS_ACCOUNT_ID=111222333444\nexport AWS_REGION=eu-west-1\n\nfinch tag \\\n    hello-finch:latest \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch:latest\n</code></pre> <pre><code>$AWS_ACCOUNT_ID=\"111222333444\"\n$AWS_REGION=\"eu-west-1\"\n\nfinch tag `\n    hello-finch:latest `\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch:latest\n</code></pre> <pre><code>export AWS_ACCOUNT_ID=111222333444\nexport AWS_REGION=eu-west-1\n\nsudo -E finch tag \\\n    hello-finch:latest \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch:latest\n</code></pre> </li> <li> <p>The Amazon ECR registry requires an authentication token to push and pull    images. Therefore we need to login first with <code>finch login</code>. This may be    different for your container image registry, see registry    authentication for more information.</p> macOS / bashWindows / PowerShellLinux <pre><code>aws ecr get-login-password --region $AWS_REGION | finch login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com\n</code></pre> <pre><code>aws ecr get-login-password --region $AWS_REGION | finch login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com\n</code></pre> <pre><code>aws ecr get-login-password --region $AWS_REGION | sudo -E finch login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com\n</code></pre> <p>If the login has been successful you should see:</p> <pre><code>Login Succeeded\n</code></pre> </li> <li> <p>Using the <code>finch push</code> command we push the container image from the local    machine up to the container image repository.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch:latest\n</code></pre> <pre><code>finch push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch:latest\n</code></pre> <pre><code>sudo -E finch push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch:latest\n</code></pre> </li> <li> <p>With the AWS Console or the AWS CLI we can verify that the container image    has been successfully pushed.</p> <pre><code>aws ecr list-images --repository hello-finch\n{\n    \"imageIds\": [\n        {\n            \"imageDigest\": \"sha256:69b2528740fe3923f279594db844feca13b2a078e1101de17773ab54f01af9f5\",\n            \"imageTag\": \"latest\"\n        }\n    ]\n}\n</code></pre> </li> </ol>"},{"location":"docs/getting-started/pushing-images/#pushing-a-multi-architecture-container-image-to-a-repository","title":"Pushing a Multi-Architecture Container Image to a Repository","text":"<p>In Building Container Images we also built a multi architecture container image for the hello-finch example application. In this section we will show how to push both architectures of the container image, and a container image OCI Image Index, to the container registry.</p> <ol> <li> <p>Ensure both architectures of the container image have been built and exist    locally.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch image list\n</code></pre> <pre><code>finch image list\n</code></pre> <pre><code>sudo finch image list\n</code></pre> <p>In the output you should see a list of all of the container images stored in the local container store.</p> <pre><code>REPOSITORY     TAG       IMAGE ID        CREATED          PLATFORM       SIZE       BLOB SIZE\nhello-finch    latest    5874669344b3    3 seconds ago    linux/arm64    1.8 MiB    1009.0 KiB\nhello-finch    latest    5874669344b3    3 seconds ago    linux/amd64    0.0 B      1.0 MiB\n</code></pre> </li> <li> <p>Change the name of the container image using <code>finch tag</code> so the destination    repository is included in the tag. The following example pushes a container    image to an Amazon ECR repository.</p> macOS / bashWindows / PowerShellLinux <pre><code>export AWS_ACCOUNT_ID=111222333444\nexport AWS_REGION=eu-west-1\n\nfinch tag \\\n    hello-finch:latest \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch:latest\n</code></pre> <pre><code>$AWS_ACCOUNT_ID=\"111222333444\"\n$AWS_REGION=\"eu-west-1\"\n\nfinch tag `\n    hello-finch:latest `\n    \"$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch:latest\"\n</code></pre> <pre><code>export AWS_ACCOUNT_ID=111222333444\nexport AWS_REGION=eu-west-1\n\nsudo -E finch tag \\\n    hello-finch:latest \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch:latest\n</code></pre> <p>You can verify both images have been re tagged using the <code>finch image list</code> command.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch image list\n</code></pre> <pre><code>finch image list\n</code></pre> <pre><code>sudo finch image list\n</code></pre> <p>Now you should see four images, one for each architecture for each tag.</p> <pre><code>REPOSITORY                                                  TAG       IMAGE ID        CREATED               PLATFORM       SIZE       BLOB SIZE\n111222333444.dkr.ecr.eu-west-1.amazonaws.com/hello-finch    latest    5874669344b3    1 second ago          linux/arm64    1.8 MiB    1009.0 KiB\n111222333444.dkr.ecr.eu-west-1.amazonaws.com/hello-finch    latest    5874669344b3    1 second ago          linux/amd64    0.0 B      1.0 MiB\nhello-finch                                                 latest    5874669344b3    About a minute ago    linux/arm64    1.8 MiB    1009.0 KiB\nhello-finch                                                 latest    5874669344b3    About a minute ago    linux/amd64    0.0 B      1.0 MiB\n</code></pre> </li> <li> <p>The Amazon ECR registry requires an authentication token to push and pull    images. Therefore we need to login first with <code>finch login</code>. This may be    different for your container image registry, see Registry    Authentication for more information.</p> macOS / bashWindows / PowerShellLinux <pre><code>aws ecr get-login-password --region $AWS_REGION | finch login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com\n</code></pre> <pre><code>aws ecr get-login-password --region $AWS_REGION | finch login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com\n</code></pre> <pre><code>aws ecr get-login-password --region $AWS_REGION | sudo -E finch login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com\n</code></pre> <p>If the login has been successful you should see:</p> <pre><code>Login Succeeded\n</code></pre> </li> <li> <p>Push the container images up to the container registry using the <code>--platform</code>    flag to specify the architecture(s) you want to push.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch push \\\n    --platform linux/arm64,linux/amd64 \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch:latest\n</code></pre> <pre><code>finch push `\n    --platform linux/arm64,linux/amd64 `\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch:latest\n</code></pre> <pre><code>sudo -E finch push \\\n    --platform linux/arm64,linux/amd64 \\\n    $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hello-finch:latest\n</code></pre> </li> <li> <p>With the AWS Console or the AWS CLI we can verify that the container image    has been successfully pushed. In the output below, you can see there are 3    digests. 1 corresponding to the OCI Image    Index    , and an OCI Image    Manifest    for each architecture.</p> <pre><code>aws ecr list-images --repository hello-finch\n{\n    \"imageIds\": [\n        {\n            \"imageDigest\": \"sha256:5874669344b3de32c068f264063b1f146f55609ad2bf7384628487bd3b754a38\",\n            \"imageTag\": \"latest\"\n        },\n        {\n            \"imageDigest\": \"sha256:99a17e5c4245670452db0879127c58ddbf6c0110d1643f82a01ad2d0aba10dc6\"\n        },\n        {\n            \"imageDigest\": \"sha256:7138727cd9f08d39d6a6f63fde0b5e1f735b9967fd1a918c50e1a5a8d09c9537\"\n        }\n    ]\n}\n</code></pre> </li> </ol>"},{"location":"docs/getting-started/pushing-images/#next-steps","title":"Next Steps","text":"<p>In this short section, you learned how to push container images on finch.</p> <ul> <li>To learn more about the <code>finch push</code> command see the CLI   Reference.</li> </ul>"},{"location":"docs/getting-started/running-containers/","title":"Running Containers","text":"<p>The Finch CLI aims to support the same top level commands used in other container runtimes, therefore if you have ever used <code>docker run</code> before you will quickly become familiar with<code>finch run</code>.</p> <p>Finch leverages containerd and nerdctl to run containers on the lima virtual machine.</p>"},{"location":"docs/getting-started/running-containers/#running-your-first-container","title":"Running your first container","text":"<p><code>finch run</code> is a command that lets you run a container image that either exists in a remote repository or that already exists in the local image store.</p> <p>To start the hello-finch, sample application that has been built and stored in a remote registry, we can use <code>finch run</code> following by the container image. If you need to authenticate to a container registry see pushing images documentation for instructions.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch run \\\n    public.ecr.aws/finch/hello-finch:latest\n</code></pre> <pre><code>finch run `\n    public.ecr.aws/finch/hello-finch:latest\n</code></pre> <pre><code>sudo finch run \\\n    public.ecr.aws/finch/hello-finch:latest\n</code></pre> <p>You should now see the ASCII art in your terminal.</p> <pre><code>                            @@@@@@@@@@@@@@@@@@@\n                        @@@@@@@@@@@@    @@@@@@@@@@@\n                      @@@@@@@                  @@@@@@@\n                    @@@@@@                        @@@@@@\n                  @@@@@@                            @@@@@\n                 @@@@@                      @@@#     @@@@@@@@@\n                @@@@@                     @@   @@@       @@@@@@@@@@\n                @@@@%                     @     @@            @@@@@@@@@@@\n                @@@@                                               @@@@@@@@\n                @@@@                                         @@@@@@@@@@@&amp;\n                @@@@@                                  &amp;@@@@@@@@@@@\n                 @@@@@                               @@@@@@@@\n                  @@@@@                            @@@@@(\n                   @@@@@@                        @@@@@@\n                     @@@@@@@                  @@@@@@@\n                        @@@@@@@@@@@@@@@@@@@@@@@@@@\n                            @@@@@@@@@@@@@@@@@@\n\n\nHello from Finch!\n\nVisit us @ github.com/runfinch\n</code></pre>"},{"location":"docs/getting-started/running-containers/#running-a-container-that-exposes-a-port","title":"Running a container that exposes a port","text":"<p>When running containers on Finch, you can expose a container so that it is reachable from your workstation. To do this, pass the port the application is running on, and the desired external port to the <code>--publish</code> flag for <code>finch run</code>. Note the external port has to be unique, multiple containers can not be exposed on to the same port.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch run \\\n    --publish 80:80 \\\n    public.ecr.aws/nginx/nginx\n</code></pre> <pre><code>finch run `\n    --publish 80:80 `\n    public.ecr.aws/nginx/nginx\n</code></pre> <pre><code>sudo finch run \\\n    --publish 80:80 \\\n    public.ecr.aws/nginx/nginx\n</code></pre> <p>Now in a web browser, you should be able to navigate to <code>localhost</code> and access the running web server container.</p> <p></p>"},{"location":"docs/getting-started/running-containers/#common-run-flags","title":"Common Run Flags","text":"<p>Popular <code>finch run</code> flags which will help you get started include:</p> <ul> <li> <p>Automatically clean up a container after it has exited with <code>--rm</code>.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch run \\\n    --rm \\\n    public.ecr.aws/finch/hello-finch:latest\n</code></pre> <pre><code>finch run `\n    --rm `\n    public.ecr.aws/finch/hello-finch:latest\n</code></pre> <pre><code>sudo finch run \\\n    --rm \\\n    public.ecr.aws/finch/hello-finch:latest\n</code></pre> <ul> <li> <p>Verify that all containers have been removed</p> macOS/WindowsWindows / PowerShellLinux <pre><code>$ finch ps --all\n</code></pre> <pre><code>finch ps --all\n</code></pre> <pre><code>$ sudo finch ps --all\n</code></pre> </li> </ul> </li> <li> <p>Start an interactive session into a container with the tty <code>--tty</code> and the   interactive <code>--interactive</code> flags. Assuming your container image has a shell   prompt, you will then be placed into the container where you can run commands.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch run \\\n    --interactive \\\n    --tty \\\n    public.ecr.aws/docker/library/amazonlinux:latest \\\n    /bin/bash\n</code></pre> <pre><code>finch run `\n    --interactive `\n    --tty `\n    public.ecr.aws/docker/library/amazonlinux:latest `\n    /bin/bash\n</code></pre> <pre><code>sudo finch run \\\n    --interactive \\\n    --tty \\\n    public.ecr.aws/docker/library/amazonlinux:latest \\\n    /bin/bash\n</code></pre> </li> <li> <p>Start a container as a background process with the <code>--detach</code> flag.</p> macOS / bashWindows / PowerShellLinux <pre><code>finch run \\\n    --detach \\\n    --publish 80:80 \\\n    public.ecr.aws/nginx/nginx\n</code></pre> <pre><code>finch run `\n    --detach `\n    --publish 80:80 `\n    public.ecr.aws/nginx/nginx\n</code></pre> <pre><code>sudo finch run \\\n    --detach \\\n    --publish 80:80 \\\n    public.ecr.aws/nginx/nginx\n</code></pre> </li> </ul> <p>Note</p> <p>If you encounter SSL certificate errors when trying to download images through a corporate SSL inspection proxy, you may see an error like this: <code>failed to do request: Head \"&lt;image-url&gt;\": tls: failed to verify certificate: x509: certificate signed by unknown authority</code> To resolve this issue, follow these steps:</p> <ol> <li>Access the Finch VM:</li> <li>On macOS:     <pre><code>LIMA_HOME=/Applications/Finch/lima/data /Applications/Finch/lima/bin/limactl shell finch\n</code></pre></li> <li> <p>On Windows:     Use the WSL CLI to shell into the Lima VM.</p> </li> <li> <p>Copy the certificate chain:     Copy your corporate SSL certificates to <code>/etc/pki/ca-trust/source/anchors/</code> within the VM.</p> </li> <li> <p>Update the local CA store:     <pre><code>update-ca-trust\n</code></pre></p> </li> </ol>"},{"location":"docs/getting-started/running-containers/#next-steps","title":"Next Steps","text":"<p>In this section, you learned how to run containers on Finch</p> <ul> <li>Next you can move on to pushing container images to   container registries with Finch.</li> <li>To learn more about the <code>finch run</code> command see the CLI   Reference.</li> </ul>"},{"location":"docs/integrations/devcontainers-on-finch/","title":"DevContainers on Finch","text":""},{"location":"docs/integrations/devcontainers-on-finch/#what-is-devcontainers","title":"What is DevContainers?","text":"<p>Dev Containers are used by developers to build, test, and run applications during the software development process. Development containers include additional tooling, libraries, and configurations that are helpful for the developer workflow, but not necessary or desirable in a production setting. The purpose of development containers is to provide a consistent, repeatable environment for developers.</p> <p>Visual Studio Code (VSCode) can run a workspace within a DevContainer using the Dev Containers extension. Although VSCode settings refer to Docker, Finch can support a majority of use cases as an Open Source Container Runtime Solution.</p>"},{"location":"docs/integrations/devcontainers-on-finch/#getting-started","title":"Getting Started","text":"<p>For macOS, refer to DevContainers on Finch within Mac</p> <p>For Windows, refer to DevContainers on Finch within Windows</p>"},{"location":"docs/integrations/devcontainers-on-finch/#known-bugs-or-limitations","title":"Known Bugs or Limitations","text":"<ul> <li>Identifier length limit of 76 characters: By default, VSCode uses long hash values to name images and container instances. For finch using nerdctl versions earlier than 2.0.0, the default vscode container names are too long and fail validation.</li> <li> <p>Resolution: Include a configuration option, like the following example, to declare a unique container name of less than 76 characters. (The following example uses the workspace basename, which is assumed to be less than 76 characters.)</p> <pre><code>## example using the directory as container name\n\"runArgs\": [\"--name\", \"${localWorkspaceFolderBasename}\"],\n</code></pre> </li> <li> <p>Advanced Network Creation with Compose: <code>finch compose</code> does not currently support the functionality of <code>docker compose</code>. When using <code>docker compose</code>, set the <code>DOCKER_COMPOSE_VERSION</code> to a value <code>&gt; 2.9.0</code>.</p> </li> <li> <p>Docker in Docker via Sockets: finch does not currently support any application with docker sockets.</p> </li> <li> <p>Cached Optimization: finch does not currently support cached optimization. Any related settings will be passed through execution.</p> </li> </ul>"},{"location":"docs/integrations/mac/devcontainers/","title":"DevContainers for MacOS","text":""},{"location":"docs/integrations/mac/devcontainers/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install VSCode and Extension</li> </ul> <p>To install VSCode, refer to instruction at code.visualstudio.com or your organization administrators.</p> <p>To install the extension, refer to instructions for the Dev Containers extension.</p> <ul> <li>Install Finch</li> </ul> <p>To install Finch, refer to Managing Finch:macOS Installation.</p> <ul> <li> <p>Initiate a Finch Virtual Machine (vm)</p> <pre><code>finch vm init\n</code></pre> </li> <li> <p>Modify your <code>~/.finch/finch.yaml</code> to add the following configuration option. Refer to Configuration Reference for more information.</p> <pre><code>dockercompat: true\n</code></pre> </li> </ul>"},{"location":"docs/integrations/mac/devcontainers/#configure-vscode-devcontainer-extension-settings","title":"Configure VSCode DevContainer Extension Settings","text":"<p>Open the extension settings by navigating within the setting window or using the command palette and typing \"Dev Containers: Settings\"</p> <ul> <li> <p>Configure the \"Docker Compose Path\" to: <code>&lt;path&gt;/&lt;to&gt;/finch compose</code></p> </li> <li> <p>Disable \"Docker Credential Helper\"</p> </li> <li> <p>Configure the \"Docker Path\" to: <code>&lt;path&gt;/&lt;to&gt;/finch</code></p> </li> </ul>"},{"location":"docs/integrations/mac/devcontainers/#working-with-docker-compose-projects-in-dev-containers","title":"Working with Docker Compose Projects in Dev Containers:","text":"<p>When using <code>docker compose</code>, set the <code>DOCKER_COMPOSE_VERSION</code> to a value <code>&gt; 2.9.0</code>. - Set the system environment variable within <code>.zshrc</code> and <code>source .zshrc</code></p> <ul> <li>Use <code>export DOCKER_COMPOSE_VERSION=x.x.x</code> for the current session</li> </ul> <p>\u26a0\ufe0f Note: Finch only supports dash (<code>-</code>) as the project name separator. However, Dev Container tooling relies on the separator determined by <code>docker compose version</code>. If the version is below <code>2.9.0</code>, it defaults to using underscores (<code>_</code>), causing name mismatches and container startup failures. To ensure compatibility, set the <code>DOCKER_COMPOSE_VERSION</code> to <code>&gt;= 2.9.0</code>.</p>"},{"location":"docs/integrations/windows/devcontainers/","title":"DevContainers for Windows","text":""},{"location":"docs/integrations/windows/devcontainers/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install VSCode and Extension</li> </ul> <p>To install VSCode, refer to instruction at code.visualstudio.com or your organization administrators.</p> <p>To install the extension, refer to instructions for the Dev Containers extension.</p> <ul> <li>Install Finch</li> </ul> <p>To install Finch, refer to Managing Finch:windows Installation.</p> <ul> <li> <p>Initiate a Finch Virtual Machine (vm)</p> <pre><code>finch vm init\n</code></pre> </li> <li> <p>Modify your <code>%LocalAppData%\\.finch\\finch.yaml</code> to add the following configuration option. Refer to Configuration Reference for more information.</p> <pre><code>dockercompat: true\n</code></pre> </li> </ul>"},{"location":"docs/integrations/windows/devcontainers/#configure-vscode-devcontainer-extension-settings","title":"Configure VSCode DevContainer Extension Settings","text":"<p>Open the extension settings by navigating within the setting window or using the command palette and typing \"Dev Containers: Settings\"</p> <ul> <li> <p>Configure the \"Docker Compose Path\" to: <code>C:&lt;path&gt;/&lt;to&gt;/finch.exe compose</code></p> </li> <li> <p>Disable \"Docker Credential Helper\"</p> </li> <li> <p>Configure the \"Docker Path\" to: <code>C:&lt;path&gt;/&lt;to&gt;/finch.exe</code></p> </li> <li> <p>Configure the \"Execute in WSLDistro\" to: <code>C:&lt;path&gt;/&lt;to&gt;/finch.exe</code></p> </li> <li> <p>Disable the \"Mount Wayland Socker\" option</p> </li> </ul>"},{"location":"docs/integrations/windows/devcontainers/#working-with-docker-compose-projects-in-dev-containers","title":"Working with Docker Compose Projects in Dev Containers:","text":"<p>When using <code>docker compose</code>, set the <code>DOCKER_COMPOSE_VERSION</code> to a value <code>&gt; 2.9.0</code>.</p> <ul> <li> <p>Using the Command Prompt: use <code>set DOCKER_COMPOSE_VERSION=x.x.x</code> for the current session</p> </li> <li> <p>Using the PowerShell: use <code>$env:DOCKER_COMPOSE_VERSION = \"x.x.x\"</code> for the current session</p> </li> <li> <p>Set the environment variable within the System Properties::Advanced System Settings::Environment Variables</p> </li> </ul> <p>\u26a0\ufe0f Note: Finch only supports dash (<code>-</code>) as the project name separator.  However, Dev Container tooling relies on the separator determined by <code>docker compose version</code>.  If the version is below <code>2.9.0</code>, it defaults to using underscores (<code>_</code>), causing name mismatches  and container startup failures. To ensure compatibility, set the <code>DOCKER_COMPOSE_VERSION</code> to <code>&gt;= 2.9.0</code>.</p>"},{"location":"docs/managing-finch/linux/installation/","title":"Installing Finch on Linux","text":""},{"location":"docs/managing-finch/linux/installation/#prerequisites","title":"Prerequisites","text":"<p>To get started with Finch on Linux, the development machine must meet the following prerequisites.</p> <ul> <li>Linux Kernel v4.x+</li> </ul> <p>To determine the kernel version of your Linux machine, you can run the following command:</p> <pre><code>uname -r\n</code></pre> <p>So long as the first number is greater than 4, Finch is supported. The next sections will cover how to install Finch based on which Linux distribution you are using, along with generic installation options.</p>"},{"location":"docs/managing-finch/linux/installation/#amazon-linux","title":"Amazon Linux","text":"<p>Finch is packaged in the standard Amazon Linux repositories. That means, installing Finch is as easy as installing any other Amazon Linux package:</p> AL2023AL2 <pre><code>$ sudo dnf install runfinch-finch\n</code></pre> <pre><code>$ sudo amazon-linux-extras enable docker\n$ sudo yum install runfinch-finch\n</code></pre> <p>After running this command, you will have a <code>finch</code> program in your PATH, and you can navigate to the Verifying Finch install page to proceed. Navigate to the Optional Components page to configure Finch optional components.</p> <p>Note that the all of the following Finch guides will use <code>sudo finch ...</code>. There is an optional mechanism to avoid the use of sudo, follow the link for more information.</p>"},{"location":"docs/managing-finch/linux/installation/#ubuntu","title":"Ubuntu","text":"<p>Finch is packaged in a self hosted APT repository. That means, installing Finch is as easy as this:</p> AMD64ARM64 <pre><code>$ curl -fsSL https://artifact.runfinch.com/deb/GPG_KEY.pub | sudo gpg --dearmor -o /usr/share/keyrings/runfinch-finch-archive-keyring.gpg\n$ echo \"deb [signed-by=/usr/share/keyrings/runfinch-finch-archive-keyring.gpg arch=amd64] https://artifact.runfinch.com/deb noble main\" | sudo tee /etc/apt/sources.list.d/runfinch-finch.list\n$ sudo apt update\n$ sudo apt install runfinch-finch\n</code></pre> <pre><code>$ curl -fsSL https://artifact.runfinch.com/deb/GPG_KEY.pub | sudo gpg --dearmor -o /usr/share/keyrings/runfinch-finch-archive-keyring.gpg\n$ echo \"deb [signed-by=/usr/share/keyrings/runfinch-finch-archive-keyring.gpg arch=arm64] https://artifact.runfinch.com/deb noble main\" | sudo tee /etc/apt/sources.list.d/runfinch-finch.list\n$ sudo apt update\n$ sudo apt install runfinch-finch\n</code></pre> <p>After running this command, you will have a <code>finch</code> program in your PATH, and you can navigate to the Verifying Finch install page to proceed.</p> <p>Note that the all of the following Finch guides will use <code>sudo finch ...</code>.</p>"},{"location":"docs/managing-finch/linux/installation/#generic","title":"Generic","text":"<p>For distributions which do not have packages built for them, installing Finch requires downloading and installing dependencies, as well as creating filesystem paths needed by Finch.</p> <p>Some distributions will distribute some of these packages themselves (for example, Fedora has a <code>containerd</code> package), but this guide assumes that none of Finch's dependencies are available via package managers. If the dependencies are available and installed via package managers, some of these steps may be skipped.</p> <p>The goal of these steps is to setup your system to mimic the configuration found in the finch.spec file in the runfinch/finch repository.</p> <ol> <li>Download the Finch Linux binary archive corresponding to your system's architecture from the Releases tab, and extract it using a command like <code>tar Cxzvvf /usr/local ./bin</code></li> <li>Download the Finch Daemon Linux binary archive corresponding to your system's architecture from their Releases tab, and extract it using a command like <code>tar Cxzvvf /usr/local/bin &lt;archive_name&gt; ./finch-daemon</code></li> <li>Download the latest nerdctl-full archive release corresponding to your system's architecture from their Releases tab, and extract it using a command like <code>tar Cxzvvf /usr/local &lt;archive_name&gt;</code></li> <li>Setup filesystem:<ol> <li>Config:<ol> <li><code>sudo mkdir -p /etc/finch/nerdctl</code></li> <li><code>sudo cp ./contrib/packaging/rpm/nerdctl.toml /etc/finch/nerdctl/</code></li> <li><code>sudo mkdir -p /etc/finch/buildkit</code></li> <li><code>sudo cp ./contrib/packaging/rpm/buildkitd.toml /etc/finch/buildkit/</code></li> </ol> </li> <li>Runtime dependencies<ol> <li><code>sudo mkdir -p /usr/libexec/finch</code></li> <li><code>sudo mkdir -p /var/lib/finch/buildkit</code></li> <li><code>sudo mkdir -p /var/lib/finch/nerdctl</code></li> <li><code>ln -sf /usr/local/bin/nerdctl /usr/libexec/finch/nerdctl</code></li> <li><code>ln -sf /usr/local/bin/buildctl /usr/libexec/finch/buildctl</code></li> <li><code>ln -sf /usr/local/bin/finch-daemon /usr/libexec/finch/finch-daemon</code></li> </ol> </li> </ol> </li> <li>Run system services using a service manager, like systemd, or directly. Example systemd service files can be found in the following locations:</li> <li>containerd</li> <li>buildkit</li> <li>finch-daemon</li> </ol> <p>After completing this setup, you will have a <code>finch</code> program in your PATH, and you can navigate to the Verifying Finch install page to proceed. Navigate to the Optional Components page to configure Finch optional components.</p> <p>Note that the all of the following Finch guides will use <code>sudo finch ...</code>. There is an optional mechanism to avoid the use of sudo, follow the link for more information.</p>"},{"location":"docs/managing-finch/linux/optional-components/","title":"Installing Finch optional components on Linux","text":"<p>Finch on Linux can make use of some optional components. On other Finch platforms, some of these optional components are installed at runtime. This works well for platforms where Finch has its own isolated VM environment, but runtime management of system dependencies on a shared system is more problematic, so these optional components must be installed and configured manually on Linux at this time.</p>"},{"location":"docs/managing-finch/linux/optional-components/#soci-snapshotter","title":"SOCI snapshotter","text":"<p>The SOCI snapshotter (\"SOCI\" is short for \"Seekable OCI\", and is pronounced \"so-CHEE\") is a containerd snapshotter plugin which enables standard OCI images to be lazily loaded without requiring a build-time conversion step. </p> <p>Follow the steps corresponding with your distribution in order to use the SOCI snapshotter with Finch on Linux.</p>"},{"location":"docs/managing-finch/linux/optional-components/#amazon-linux","title":"Amazon Linux","text":"<p>SOCI is packaged in the standard Amazon Linux repositories. That means, installing SOCI is as easy as installing any other Amazon Linux package:</p> AL2023AL2 <pre><code>$ sudo dnf install soci-snapshotter\n</code></pre> <pre><code>$ sudo amazon-linux-extras enable docker\n$ sudo yum install soci-snapshotter\n</code></pre> <p>SOCI also requires a daemon, which can be started with systemd after package installation:</p> <pre><code>$ sudo systemctl start soci-snapshotter\n</code></pre>"},{"location":"docs/managing-finch/linux/optional-components/#generic","title":"Generic","text":"<ol> <li>Download the SOCI binary archive corresponding to your system's architecture from the project's Releases tab, and extract it using a command like <code>tar Cxzvvf /usr/local/bin soci-snapshotter-${SOCI_VERSION}-linux-amd64-static.tar.gz ./soci ./soci-snapshotter-grpc</code></li> <li>Run the SOCI snapshotter GRPC daemon system service using a service manager, like systemd, or directly. An example systemd service file can be found here.</li> <li>Configure containerd to contain a <code>proxy_plugin</code> config section for SOCI, by following these instructions.</li> </ol>"},{"location":"docs/managing-finch/linux/optional-components/#ecr-credential-helper","title":"ECR Credential Helper","text":"<p>The Amazon ECR Docker Credential Helper is a credential helper for the Docker daemon that makes it easier to use Amazon Elastic Container Registry. It removes the need to directly manage registry credentials via traditional <code>login</code> commands, making it easier to push/pull from authenticated ECR registries.</p>"},{"location":"docs/managing-finch/linux/optional-components/#amazon-linux_1","title":"Amazon Linux","text":"<p>The ECR Credential Helper is packaged in the standard Amazon Linux repositories. That means, installing ECR Credential Helper is as easy as installing any other Amazon Linux package:</p> AL2023AL2 <pre><code>$ sudo dnf install amazon-ecr-credential-helper\n</code></pre> <pre><code>$ sudo amazon-linux-extras enable docker\n$ sudo yum install amazon-ecr-credential-helper\n</code></pre>"},{"location":"docs/managing-finch/linux/optional-components/#generic_1","title":"Generic","text":"<ol> <li>Download the ECR Credential Helper binary corresponding to your system's architecture from the project's Releases tab, and set it's executable bit using <code>chmod +x docker-credential-ecr-login</code>.</li> <li>Move the executable to a location within the root user's <code>PATH</code> (e.g. <code>mv docker-credential-ecr-login /bin/docker-credential-ecr-login</code>)</li> </ol>"},{"location":"docs/managing-finch/linux/optional-components/#configuration","title":"Configuration","text":"<p>The ECR Credential Helper must also be configured for the root user's docker config, which can be found at <code>/root/.docker/config.json</code>. Follow the steps in this guide to configure the credential helper.</p>"},{"location":"docs/managing-finch/linux/optional-components/#running-finch-without-sudo","title":"Running finch without <code>sudo</code>","text":"<p>By default, Finch requires <code>sudo</code> to run, since the containerd and buildkit daemons require root access. In order to avoid the need for typing <code>sudo</code> before every finch command, you can run the following:</p> <pre><code># create a new group which will contain all users that can run finch without sudo\n/usr/sbin/groupadd -r \"finch\"\n# add your user to the group\n/usr/sbin/usermod -a -G \"finch\" \"${USER}\"\n\n# allow users to execute without using \"sudo\"\nsudo chgrp \"finch\" /usr/local/bin/nerdctl\nsudo chmod +s /usr/local/bin/nerdctl\nsudo chgrp \"finch\" /usr/bin/finch\nsudo chmod +s /usr/bin/finch\n</code></pre> <p>NOTE: this process does not remove the requirement for running the commands with root privileges, it simply sidesteps the need to type <code>sudo</code> every execution. Evaluate whether using <code>chmod +s</code> fits your security posture before using this configuration.</p> <p>Reference: https://github.com/containerd/nerdctl/blob/main/docs/faq.md#does-nerdctl-have-an-equivalent-of-sudo-usermod--ag-docker-user-</p>"},{"location":"docs/managing-finch/linux/uninstalling-finch/","title":"Uninstalling Finch","text":"<p>The best way to uninstall Finch on Linux depends on your system.</p>"},{"location":"docs/managing-finch/linux/uninstalling-finch/#uninstalling-finch-on-amazon-linux","title":"Uninstalling Finch on Amazon Linux","text":"<p>Amazon Linux packages can be uninstalled via using the system package manager:</p> AL2023AL2 <pre><code>$ sudo dnf remove runfinch-finch\n</code></pre> <pre><code>$ sudo yum remove runfinch-finch\n</code></pre>"},{"location":"docs/managing-finch/linux/uninstalling-finch/#uninstalling-finch-on-ubuntu","title":"Uninstalling Finch on Ubuntu","text":"<p>Ubuntu packages can be uninstalled via using the system package manager:</p> <pre><code>```shell\n$ sudo apt remove runfinch-finch\n```\n</code></pre>"},{"location":"docs/managing-finch/linux/uninstalling-finch/#manual-uninstallation","title":"Manual uninstallation","text":"<p>If you followed the manual installation steps, Finch and its dependencies can be fully uninstalled by running the following commands:</p> <pre><code>sudo rm -rf /etc/finch/ &amp;&amp; \\\nsudo rm -rf /usr/libexec/finch/ &amp;&amp; \\\nsudo rm -rf /var/lib/finch/\n</code></pre>"},{"location":"docs/managing-finch/linux/uninstalling-finch/#dependencies","title":"Dependencies","text":"<p>Depending on the <code>nerdctl-full</code> archive that was extracted, there will be different files that need to be removed. You can query the files in the nerdct-full archive that you used and remove any matching files by running the following command:</p> <pre><code>tar -tf &lt;path/to/nerdctl-full-archive&gt;\n</code></pre> <p>To do this all at once:</p> <pre><code>cd /usr/local\nfor f in $(tar -tf &lt;path/to/nerdctl-full-archive&gt;); do\nsudo rm -rf $f\ndone\n</code></pre>"},{"location":"docs/managing-finch/linux/upgrading-finch/","title":"Upgrading Finch","text":"<p>Finch releases updates on a regular cadence. To find the latest release and information on what was included see the release notes.</p> <p>On Linux, the way you upgrade depends on your distribution.</p>"},{"location":"docs/managing-finch/linux/upgrading-finch/#amazon-linux","title":"Amazon Linux","text":"<p>Amazon Linux packages can be upgraded via using the system package manager:</p> AL2023AL2 <pre><code>$ sudo dnf update runfinch-finch\n</code></pre> <pre><code>$ sudo yum update runfinch-finch\n</code></pre>"},{"location":"docs/managing-finch/linux/upgrading-finch/#ubuntu","title":"Ubuntu","text":"<p>Ubuntu packages can be upgraded via using the system package manager:</p> <pre><code>```shell\n$ sudo apt update\n$ sudo apt upgrade runfinch-finch\n```\n</code></pre>"},{"location":"docs/managing-finch/linux/upgrading-finch/#manual-installation","title":"Manual installation","text":"<p>Components in a manual installation of Finch can be upgraded individually. Follow the installation instructions for detailed instructions on how to install various components. For a manual installation, upgrading is essentially re-extracting newer versions of software as if it were a new installation.</p>"},{"location":"docs/managing-finch/macos/disk-management/","title":"Managing Finch Storage","text":""},{"location":"docs/managing-finch/macos/disk-management/#disk-mounts","title":"Disk Mounts","text":"<p>To allow containers and container image builds to access files from the local workstation within the virtual machine, a users home directory (on macOS this is <code>/Users/&lt;username&gt;</code>) is automatically mounted into the machine by Lima.</p> <p>To demonstrate this, in an empty directory on the workstation you can create a <code>hello</code> file, and then mount it into the container with the <code>--volume</code> command.</p> <pre><code>touch hello\n\nfinch run \\\n   --volume $PWD:/data \\\n   public.ecr.aws/amazonlinux/amazonlinux:2 \\\n   ls /data\n</code></pre> <p>You should see the file you just created.</p> <pre><code>hello\n</code></pre>"},{"location":"docs/managing-finch/macos/disk-management/#adding-additional-disk-mounts","title":"Adding additional disk mounts","text":"<p>For users wanting to mount additional directories in the virtual machine, they can specify additional mounts in the Finch Configuration.</p> <ol> <li> <p>Open the Finch configuration in a text editor <code>~/.finch/finch.yaml</code> and add    the relevant paths for the local directory on your workstation.</p> <pre><code>cpus: 3\nmemory: 4GiB\nadditional_directories:\n  - \"/Volumes/test\"\n</code></pre> <p>Note</p> <p>If your username doesn't match your home directory name, you may need to add <code>/Users/&lt;username&gt;</code> to the additional_directories list. This can help avoid permission issues when building Docker images or accessing files within containers. <pre><code>additional_directories:\n    - \"/Users/&lt;username&gt;\"\n</code></pre></p> <ol> <li>Restart the virtual machine to pick up the changes in the mounts.</li> </ol> <pre><code>finch vm stop\nfinch vm start\n</code></pre> </li> <li> <p>Once the virtual machine has been restarted you can test this mount. First    create a temporary directory and file in this new disk location.</p> <pre><code>mkdir /Volume/test/testdir\ntouch /Volume/test/testdir/hello\n</code></pre> <p>Then mount the volume into a new container.</p> <pre><code>finch run \\\n   --volume /Volume/test/testdir:/data \\\n   public.ecr.aws/amazonlinux/amazonlinux:2 \\\n   ls /data\n</code></pre> <p>You should see the file you just created.</p> <pre><code>hello\n</code></pre> </li> </ol>"},{"location":"docs/managing-finch/macos/disk-management/#disk-mount-technology","title":"Disk Mount Technology","text":"<p>By default the disk is mounted into the virtual machine using sshfs. For users running macOS 13 or later, if you switch to Apple's Virtualization Framework in the Finch Configuration, the disk mounts will instead leverage the more performant virtiofs.</p> <ol> <li> <p>Open the Finch configuration in a text editor <code>~/.finch/finch.yaml</code> and add    the key <code>vmType</code> with the value <code>vz</code>.</p> <pre><code>cpus: 3\nmemory: 4GiB\nvmType: vz\n</code></pre> </li> <li> <p>Restart the virtual machine to pick up the changes in the virtualization technology.</p> <pre><code>finch vm stop\nfinch vm start\n</code></pre> </li> </ol>"},{"location":"docs/managing-finch/macos/disk-management/#disk-size","title":"Disk Size","text":"<p>By default the Finch virtual machine will have a disk capacity of 50GB, even though you may have more disk space available on the local workstation. As you start to build container images and run containers, this disk space may reach capacity.</p> <p>To free up disk space you can delete stale container image layers with:</p> <pre><code>finch image prune\n</code></pre> <p>You can also free up disk by delete all container images without a container attached with:</p> <pre><code>finch image prune --all\n</code></pre> <p>Note</p> <p>Running <code>finch system prune</code> cleans up unused containers, images, volumes, and networks inside the VM, but it    does not reduce disk usage on the host OS. To reclaim the freed space on your Mac, follow these steps:</p> <p>Log in to the VM shell:</p> <pre><code>export LIMA_HOME=/Applications/Finch/lima/data\n/Applications/Finch/lima/bin/limactl shell finch\n</code></pre> <p>Run fstrim inside the VM:</p> <pre><code>sudo fstrim -v /mnt/lima-finch\n</code></pre>"},{"location":"docs/managing-finch/macos/disk-management/#increasing-the-size-of-the-data-disk","title":"Increasing the size of the Data Disk","text":"<p>To expand the virtual machine disk size above 50GB, you can use the Finch VM disk resize command.</p> <ol> <li> <p>First make sure the virtual machine has been stopped</p> <pre><code>finch vm stop\n</code></pre> </li> <li> <p>Resize the virtual machine disk using the finch vm disk resize command.</p> <pre><code>finch vm disk resize --size &lt;size&gt;\n</code></pre> <p>For example, to increase to 100GiB:</p> <pre><code>finch vm disk resize --size 100GiB\n</code></pre> <p>Note: Disk size can only be increased, not decreased. This is due to limitations with the underlying sparse    disk format used by QEMU, which does not support shrinking after expansion.</p> </li> <li> <p>Next start back up the virtual machine</p> <pre><code>finch vm start\n</code></pre> </li> <li> <p>To validate the change has been successful, shell into the    virtual machine, checks the disk size with <code>df -h</code>.</p> <pre><code>export LIMA_HOME=/Applications/Finch/lima/data\n\n/Applications/Finch/lima/bin/limactl shell finch df -H\n</code></pre> </li> </ol>"},{"location":"docs/managing-finch/macos/installation/","title":"Installing Finch on macOS","text":""},{"location":"docs/managing-finch/macos/installation/#prerequisites","title":"Prerequisites","text":"<p>To get started with Finch on macOS, the development machine must meet the following prerequisites.</p> <ul> <li>macOS versions:<ul> <li>14 Sonoma</li> <li>13 Ventura</li> </ul> </li> <li>Both Intel and Apple Silicon based systems running the last 2 major versions of macOS are supported.</li> <li>Recommended minimum hardware requirements is at least 2 vCPU and 4 GB memory.</li> <li>Administrative privileges are required to install Finch on to the machine.</li> </ul> <p>Finch may work on previous macOS releases, however at this time it is only tested on the versions listed above.</p>"},{"location":"docs/managing-finch/macos/installation/#installing-finch-with-homebrew","title":"Installing Finch with homebrew","text":"<p>To install Finch with a package manager you can leverage the homebrew package manager.</p> <ol> <li> <p>Verify that homebrew is already installed on the system by running the brew    help command <code>brew help</code> in your favorite terminal application. If it is not,    navigate to the homebrew documentation for installation    instructions.</p> <pre><code>brew help\n</code></pre> </li> <li> <p>Install Finch using the <code>brew</code> CLI. If prompted, enter your macOS password.</p> <pre><code>brew install finch\n</code></pre> </li> <li> <p>You can now verify the installation.</p> <pre><code># Check the installed Finch version\nfinch --version\n\n# Check the status of the Finch virtual machine\nfinch vm status\n</code></pre> </li> </ol>"},{"location":"docs/managing-finch/macos/installation/#installing-using-the-application-package","title":"Installing using the Application Package","text":"<p>For each Finch release, we provider a <code>.pkg</code> Application Package. The latest package can be found on the Github Releases, with a separate package available for each architecture (Apple Silicon and Intel).</p> <ol> <li> <p>Download the relevant Application Package from the Finch Github Releases page. Ensuring you have    selected the appropriate version and architecture.</p> </li> <li> <p>Once the Application Package has been downloaded, in    Finder, you can double click the    <code>.pkg</code> and start the installation. Click continue.</p> <p></p> </li> <li> <p>Read and accept the Finch license and click continue.</p> <p></p> </li> <li> <p>Click Install. This will prompt you for your macOS password.</p> <p></p> </li> <li> <p>When the Finch installation is complete, you can close the installation    prompt.</p> <p></p> </li> <li> <p>You can now verify the installation.</p> <pre><code># Check the installed Finch version\nfinch --version\n\n# Check the status of the Finch virtual machine\nfinch vm status\n</code></pre> </li> </ol>"},{"location":"docs/managing-finch/macos/uninstalling-finch/","title":"Uninstalling Finch","text":"<p>Depending on the installation method, the process to uninstall Finch varies. If you are leveraging the homebrew package manager, you can use homebrew's builtin uninstallation method. If you installed Finch using the Application Package, there is an uninstall script included in Finch.</p>"},{"location":"docs/managing-finch/macos/uninstalling-finch/#uninstalling-finch-with-homebrew","title":"Uninstalling Finch with homebrew","text":"<p>If you have installed Finch with the homebrew package manager, you can uninstall Finch using <code>brew uninstall</code>.</p> <pre><code>brew uninstall finch\n</code></pre> <p>The package manager should then go through cleaning up the relevant finch files.</p> <pre><code>==&gt; Uninstalling Cask finch\n==&gt; Running uninstall script /Applications/Finch/uninstall.sh\nPassword:\nFinch-v0.6.2 will be REMOVED.\nApplication uninstalling process started\n[1/3] [DONE] Successfully deleted shortcut links\n[2/3] [DONE] Successfully deleted application informations\n[3/3] [DONE] Successfully deleted application\nApplication uninstall process finished\n</code></pre>"},{"location":"docs/managing-finch/macos/uninstalling-finch/#uninstalling-finch-with-the-uninstall-script","title":"Uninstalling Finch with the uninstall script","text":"<p>Within the Finch Application Package we include a script to help with uninstallation. You must run the the uninstallation script as a privileged user. When running this command you will be prompted for a password for the privileged user.</p> <pre><code>sudo bash /Applications/Finch/uninstall.sh\n</code></pre> <p>At the confirmation prompt, enter <code>Y</code>.</p> <pre><code>Finch-v0.6.2 will be REMOVED.\nDo you wish to continue [Y/n]?\n</code></pre> <p>After the script has finished, the uninstallation process is complete.</p>"},{"location":"docs/managing-finch/macos/upgrading-finch/","title":"Upgrading Finch","text":"<p>Finch releases updates on a regular cadence. To find the latest release and information on what was included see the release notes.</p> <p>A Finch release includes new versions of all components of the stack, including the latest operating system patches. As part of a Finch upgrade, all container related data (container images and container volumes) are persisted between upgrades.</p>"},{"location":"docs/managing-finch/macos/upgrading-finch/#upgrading-finch-with-homebrew","title":"Upgrading Finch with homebrew","text":"<p>If you have installed Finch with the homebrew package manager, you can upgrade Finch using <code>brew</code>.</p> <ol> <li> <p>Retrieve the latest package versions with <code>brew update</code>.</p> <pre><code>brew update\n</code></pre> </li> <li> <p>You can validate that a new Finch version is available with <code>brew    outdated</code>.</p> <pre><code>brew outdated finch\n</code></pre> <p>If a response is returned, there is an updated available for Finch.</p> <pre><code>finch (0.6.1) != 0.6.2\n</code></pre> </li> <li> <p>Upgrade the package with <code>brew upgrade</code>.</p> <pre><code>brew upgrade finch\n</code></pre> </li> <li> <p>Once the command has finished, you can check the status of the Finch virtual    machine with <code>finch version</code>.</p> <pre><code>finch version\n</code></pre> <p>The output shows the version of Finch installed. If the virtual machine is running, it will also show the versions of the various container components.</p> <pre><code>finch version\nClient:\n Version:       v0.6.2\n OS/Arch:       linux/arm64\n GitCommit:     741d578d9ab456a5f58f050d2324417501868e02\n nerdctl:\n  Version:      v1.4.0\n  GitCommit:    7e8114a82da342cdbec9a518c5c6a1cce58105e9\n buildctl:\n  Version:      v0.11.6\n  GitCommit:    2951a28cd7085eb18979b1f710678623d94ed578\n\nServer:\n containerd:\n  Version:      v1.7.1\n  GitCommit:    1677a17964311325ed1c31e2c0a3589ce6d5c30d\n runc:\n  Version:      1.1.7\n  GitCommit:    v1.1.7-0-g860f061b\n</code></pre> </li> </ol>"},{"location":"docs/managing-finch/macos/upgrading-finch/#upgrading-finch-using-the-application-package","title":"Upgrading Finch using the Application Package","text":"<p>For each Finch release, we provider a <code>.pkg</code> Application Package. The latest package can be found on the Github Releases, with a separate package available for each architecture (Apple Silicon and Intel).</p> <ol> <li> <p>Download the relevant Application Package from the Finch Github Releases page. Ensuring you have    selected the appropriate version and architecture</p> </li> <li> <p>Once the Application Package has been download, in    Finder, you can double click the    <code>.pkg</code> and start the upgrade. A popup on the installer, should display a    warning that an existing version of Finch has been found and that it will be    removed prior to upgrade. Click Ok on the pop up, and continue on the wizard.</p> <p></p> </li> <li> <p>Click through the various pages in the wizard. This wizard is the same as the    wizard previously seen during the installation.</p> </li> <li> <p>Once the command has finished, you can check the status of the Finch virtual    machine with <code>finch version</code>.</p> <pre><code>finch version\n</code></pre> <p>The output shows the version of Finch installed. If the virtual machine is running, it will also show the versions of the various container components.</p> <pre><code>finch version\nClient:\n Version:       v0.6.2\n OS/Arch:       linux/arm64\n GitCommit:     741d578d9ab456a5f58f050d2324417501868e02\n nerdctl:\n  Version:      v1.4.0\n  GitCommit:    7e8114a82da342cdbec9a518c5c6a1cce58105e9\n buildctl:\n  Version:      v0.11.6\n  GitCommit:    2951a28cd7085eb18979b1f710678623d94ed578\n\nServer:\n containerd:\n  Version:      v1.7.1\n  GitCommit:    1677a17964311325ed1c31e2c0a3589ce6d5c30d\n runc:\n  Version:      1.1.7\n  GitCommit:    v1.1.7-0-g860f061b\n</code></pre> </li> </ol>"},{"location":"docs/managing-finch/windows/installation/","title":"Installing Finch on Windows","text":""},{"location":"docs/managing-finch/windows/installation/#prerequisites","title":"Prerequisites","text":"<p>To get started with Finch on Windows, the development machine must meet the following prerequisites.</p> <ul> <li>Windows versions:<ul> <li>Windows 11 (x86-64)</li> <li>Windows 10 Version 1903 or later, with Build 18362.1049 (x86-64)</li> </ul> </li> <li>Recommended minimum hardware requirements is at least 2 vCPU and 4 GB memory.</li> <li>Administrative privileges are required to install Finch on to the machine.</li> <li>WSL 2 already installed</li> <li>(Optional) For the best experience running terminal commands on Windows, it's recommended to install Microsoft's Windows Terminal</li> </ul> <p>To determine the build version of your Windows 10 installation, you can either run the following command: <pre><code>[System.Environment]::OSVersion.Version\n\nMajor  Minor  Build  Revision\n-----  -----  -----  --------\n10     0      20348  0\n</code></pre></p> <p>...or press Windows + R and run <code>winver.exe</code>.</p> <p>So long as the \"Build\" number is greater than 18362, WSL 2 and Finch are supported. The next section will cover how to install WSL 2 based on which version of Windows you have installed.</p>"},{"location":"docs/managing-finch/windows/installation/#installing-wsl-2","title":"Installing WSL 2","text":"<p>There are two different methods of installing WSL 2 depending on which version of Windows you have installed. For newer versions (Windows 11 and Windows 10 with build greater than 19041), follow this guide from Microsoft. For Windows 10 builds greater than 18362.1049, follow this guide (make sure to follow the WSL 2 steps as well).</p>"},{"location":"docs/managing-finch/windows/installation/#verifying-wsl-2-install","title":"Verifying WSL 2 install","text":"<p>After you're done installing WSL 2, or if you've already had it installed and you've run <code>wsl --update</code>, you can verify your installation.</p> <p>To verify your WSL 2 installation, run the <code>wsl.exe -l -v</code> command. The output should look similar to this:</p> <pre><code>wsl.exe -l -v\n  NAME          STATE           VERSION\n* Ubuntu        Stopped         2\n</code></pre> <p>The <code>wsl.exe --status</code> command should also have output similar to this: <pre><code>wsl --status\nDefault Distribution: Ubuntu\nDefault Version: 2\n</code></pre></p> <p>If the default version is not <code>2</code>, run <code>wsl --set-default-version 2</code>.</p> <p>If your any other output is different or these commands do not work, please refer back to the Microsoft guides for troubleshooting steps.</p>"},{"location":"docs/managing-finch/windows/installation/#installing-finch","title":"Installing Finch","text":"<p>After verifying your WSL 2 installation, Finch can be installed like so:</p> <ol> <li>Download the latest Finch Windows installer (<code>Finch.msi</code>) from Finch's GitHub repository</li> <li> <p>Run <code>Finch.msi</code></p> <p></p> </li> <li> <p>Read and accept the Finch license and click Next.</p> <p></p> </li> <li> <p>Select your install location if different from the default location, and click Next.</p> <p></p> </li> <li> <p>Click Install.</p> <p></p> </li> <li> <p>When the Finch installation is complete, you can close the installation window by pressing Finish.</p> <p></p> </li> <li> <p>Finch is now installed! Relaunch any terminal windows in order for the <code>finch</code> command to be available in your PATH. Navigate to Verifying Finch install to proceed.</p> </li> </ol> <p>Warning</p> <p>By default, Finch uses the standard WSL configuration, which mounts the host's C drive into Finch VM with read-write access. If you prefer to restrict access to the VM (and the containers running inside) by setting the C drive to read-only, follow the mentioned here.</p>"},{"location":"docs/managing-finch/windows/uninstalling-finch/","title":"Uninstalling Finch","text":"<p>The best way to uninstall Finch on Windows is by using the standard method via the Settings app. </p>"},{"location":"docs/managing-finch/windows/uninstalling-finch/#uninstalling-finch-via-settings-app","title":"Uninstalling Finch via Settings app","text":"<ol> <li>Open the Settings app and navigate to the \"Apps &amp; features\" subpage</li> <li>Search for \"Finch\"</li> <li>Click \"Uninstall\"</li> <li>Done!</li> </ol>"},{"location":"docs/managing-finch/windows/upgrading-finch/","title":"Upgrading Finch","text":"<p>Finch releases updates on a regular cadence. To find the latest release and information on what was included see the release notes.</p> <p>A Finch release includes new versions of all components of the stack, including the latest operating system patches. As part of a Finch upgrade, all container related data (container images and container volumes) are persisted between upgrades.</p> <p>On Windows, currently the best way to upgrade is to download and run the latest Finch.msi release from Finch's GitHub repository. For detailed instructions on running the .msi, see the Windows installation page.</p> <p>After completing the installation, you can verify that the new version has been installed by running:</p> <ol> <li> <p>Run <code>finch vm init</code></p> </li> <li> <p>Once the command has finished, you can check the status of the Finch virtual    machine with <code>finch version</code>.</p> <pre><code>finch version\n</code></pre> <p>The output shows the version of Finch installed. If the virtual machine is running, it will also show the versions of the various container components.</p> <pre><code>finch version\nClient:\n Version:       v0.6.2\n OS/Arch:       linux/arm64\n GitCommit:     741d578d9ab456a5f58f050d2324417501868e02\n nerdctl:\n  Version:      v1.4.0\n  GitCommit:    7e8114a82da342cdbec9a518c5c6a1cce58105e9\n buildctl:\n  Version:      v0.11.6\n  GitCommit:    2951a28cd7085eb18979b1f710678623d94ed578\n\nServer:\n containerd:\n  Version:      v1.7.1\n  GitCommit:    1677a17964311325ed1c31e2c0a3589ce6d5c30d\n runc:\n  Version:      1.1.7\n  GitCommit:    v1.1.7-0-g860f061b\n</code></pre> </li> </ol>"},{"location":"docs/managing-finch/windows/wsl-configuration/","title":"WSL Configuration","text":"<p>Windows Subsystem for Linux can be optimized and tuned using a configuration file located at C:\\Users\\.wslconfig. In the sections below we discuss some configuration that can be tuned to optimize Finch. For a full list of .wslconfig configuration options see the Microsoft documentation here. <p>Warning</p> <p>The configuration changes which modify your <code>.wslconfig</code> file will apply to ALL WSL 2 distributions.</p>"},{"location":"docs/managing-finch/windows/wsl-configuration/#limiting-cpu-and-memory-usage","title":"Limiting CPU and memory usage","text":"<p>For users who want to replicate Finch's <code>finch.yaml</code> <code>memory</code> and <code>cpu</code> can instead use similar options in their <code>.wslconfig</code> file, like so:</p> <pre><code>[wsl2]\n\n# Limits VM memory to use no more than 4 GB.\n# This can be set as whole numbers using GB or MB\nmemory=4GB \n\n# Sets the VM to use two virtual processors\nprocessors=2\n</code></pre>"},{"location":"docs/managing-finch/windows/wsl-configuration/#reclaiming-memory-automatically","title":"Reclaiming memory automatically","text":"<p>In addition to setting max memory limits, user's can also specify to clean up WSL cached memory automatically. With this setting unset, cached memory remains allocated by the WSL 2 VM until shutdown.</p> <pre><code>[experimental]\n# Automatically releases cached memory after detecting idle CPU usage.\n# Set to gradual for slow release, and dropcache for instant\n# release of cached memory.\nautoMemoryReclaim=dropcache\n</code></pre>"},{"location":"docs/managing-finch/windows/wsl-configuration/#steps-to-disable-c-drive-auto-mount","title":"Steps to Disable C Drive Auto-Mount","text":"<p>Step 1: Disable C Drive Auto-Mount in WSL Configuration</p> <p>Log in to the Finch VM and disable the C drive auto-mount in the WSL configuration:</p> <p><pre><code>PS C:\\Users\\Administrator&gt; wsl -d lima-finch\n[root@EC2AMAZ-R56AQRB Desktop] cat /etc/wsl.conf\n[boot]\nsystemd=true\n\n# Disable auto-mount\n[automount]\nenabled=false \n</code></pre> Step 2: Modify fstab for mounting C Drive in read-only</p> <p>Edit the fstab file to add entries for mounting the C drive in read-only mode.  Some Finch commands require read-write access to <code>C:/Users/Administrator</code>, so we'll need to mount that directory in RW mode. </p> <pre><code>[root@EC2AMAZ-R56AQRB Administrator] vi /etc/fstab\nC:/ /mnt/c drvfs ro 0 0\nC:/Users/Administrator /mnt/c/Users/Administrator drvfs rw 0 0\nC:/source-dir-path /mnt/mount-dir-path drvfs perms 0 0 # Can add more dirs which requires RW access if needed\n</code></pre> <p>Step 3: Exit the VM and Restart Finch</p> <p>To apply your changes, exit the VM and restart Finch:</p> <pre><code>PS C:\\&gt; wsl --shutdown \nPS C:\\&gt; finch vm status\nStopped\nPS C:\\&gt; finch vm start\n</code></pre> <p>Finch on Windows does not make any claims or guarantees regarding VM-level isolation, so consider the machine as the security boundary.</p>"},{"location":"docs/troubleshooting/get-support/","title":"Getting Finch Support","text":"<p>Finch is an open source project, available license free to all users. There are no licensing tiers or commercial agreements required to use and run Finch.</p>"},{"location":"docs/troubleshooting/get-support/#creating-a-support-bundle","title":"Creating a Support Bundle","text":"<p>Before reaching out to the team, it would be a great help if you created a support bundle. This creates a zip archive providing information about the environment, and the logs of the various Finch components.</p> <pre><code>finch support-bundle generate\n</code></pre>"},{"location":"docs/troubleshooting/get-support/#accessing-support","title":"Accessing Support","text":""},{"location":"docs/troubleshooting/get-support/#open-source-support","title":"Open Source Support","text":"<p>Finch is an open source project with a friendly group of maintainers and contributors. If you have found a problem or want to report a bug please create an Issue on the Finch GitHub repository.</p>"},{"location":"docs/troubleshooting/get-support/#amazon-web-services-support","title":"Amazon Web Services Support","text":"<p>If you are an Amazon Web Services customer with a Developer tier or higher support plan, you can create technical support tickets for Finch in the AWS console here.</p>"}]}